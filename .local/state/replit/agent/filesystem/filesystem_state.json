{"file_contents":{"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1902},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1410},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1217},"netlify.toml":{"content":"[build]\n  command = \"npm run build\"\n  publish = \"dist/public\"\n\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200\n\n[[headers]]\n  for = \"/*\"\n  [headers.values]\n    X-Frame-Options = \"DENY\"\n    X-XSS-Protection = \"1; mode=block\"\n    X-Content-Type-Options = \"nosniff\"\n    Referrer-Policy = \"strict-origin-when-cross-origin\"\n\n[[headers]]\n  for = \"*.js\"\n  [headers.values]\n    Cache-Control = \"public, max-age=31536000, immutable\"\n\n[[headers]]\n  for = \"*.css\"\n  [headers.values]\n    Cache-Control = \"public, max-age=31536000, immutable\"\n\n[[headers]]\n  for = \"*.glb\"\n  [headers.values]\n    Cache-Control = \"public, max-age=31536000, immutable\"\n    Content-Type = \"model/gltf-binary\"\n\n[[headers]]\n  for = \"*.gltf\"\n  [headers.values]\n    Cache-Control = \"public, max-age=31536000, immutable\"\n    Content-Type = \"model/gltf+json\"\n\n[[headers]]\n  for = \"*.hdr\"\n  [headers.values]\n    Cache-Control = \"public, max-age=31536000, immutable\"\n\n[dev]\n  command = \"npm run dev\"\n  port = 5000\n  targetPort = 5000\n  framework = \"#custom\"\n","size_bytes":1032},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":266},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":768},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-is-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\";\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      ],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n});\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  );\n});\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n));\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n));\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (!tooltip) {\n      return button;\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />);\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","size_bytes":23790},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1198},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        // LuxSole Brand Palette\n        luxsole: {\n          'dark-green': '#0F3F2B',\n          'emerald': '#1FA07A',\n          'forest': '#072A1E',\n          'gold': '#E1B75A',\n          'neutral': '#0A0D0B',\n        },\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"gold-pulse\": {\n          \"0%, 100%\": {\n            opacity: \"1\",\n            boxShadow: \"0 0 0 0 rgba(225, 183, 90, 0.4)\",\n          },\n          \"50%\": {\n            opacity: \"0.8\",\n            boxShadow: \"0 0 0 10px rgba(225, 183, 90, 0)\",\n          },\n        },\n        \"fade-in\": {\n          \"0%\": {\n            opacity: \"0\",\n            transform: \"translateY(20px)\",\n          },\n          \"100%\": {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        \"slide-in-left\": {\n          \"0%\": {\n            opacity: \"0\",\n            transform: \"translateX(-50px)\",\n          },\n          \"100%\": {\n            opacity: \"1\",\n            transform: \"translateX(0)\",\n          },\n        },\n        \"scale-in\": {\n          \"0%\": {\n            opacity: \"0\",\n            transform: \"scale(0.9)\",\n          },\n          \"100%\": {\n            opacity: \"1\",\n            transform: \"scale(1)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"gold-pulse\": \"gold-pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n        \"fade-in\": \"fade-in 0.6s cubic-bezier(0.4, 0, 0.2, 1)\",\n        \"slide-in-left\": \"slide-in-left 0.6s cubic-bezier(0.4, 0, 0.2, 1)\",\n        \"scale-in\": \"scale-in 0.4s cubic-bezier(0.4, 0, 0.2, 1)\",\n      },\n      fontFamily: {\n        sans: ['Inter', 'system-ui', '-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'sans-serif'],\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3914},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7224},"client/src/components/luxsole/Gallery.tsx":{"content":"/**\n * Product Gallery Component\n * \n * Grid of 3D shoe previews with hover micro-interactions\n * and animated reveals\n */\n\nimport { useRef, useEffect } from \"react\";\nimport { useLuxSole, DEFAULT_SHOES } from \"@/lib/stores/useLuxSole\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls, PerspectiveCamera, Environment } from \"@react-three/drei\";\nimport ShoeModel from \"@/models/ShoeModel\";\nimport gsap from \"gsap\";\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\nimport * as THREE from \"three\";\n\ngsap.registerPlugin(ScrollTrigger);\n\ninterface GalleryItemProps {\n  shoe: typeof DEFAULT_SHOES[0];\n  index: number;\n}\n\nfunction GalleryItem({ shoe, index }: GalleryItemProps) {\n  const { setSelectedShoe, setCustomizerOpen, useAdvancedShaders } = useLuxSole();\n  const cardRef = useRef<HTMLDivElement>(null);\n  const canvasContainerRef = useRef<HTMLDivElement>(null);\n  \n  useEffect(() => {\n    if (cardRef.current) {\n      // Staggered reveal animation\n      gsap.fromTo(\n        cardRef.current,\n        {\n          opacity: 0,\n          y: 50,\n          scale: 0.9,\n        },\n        {\n          opacity: 1,\n          y: 0,\n          scale: 1,\n          duration: 0.8,\n          delay: index * 0.15,\n          ease: \"power3.out\",\n          scrollTrigger: {\n            trigger: cardRef.current,\n            start: \"top bottom-=100\",\n            toggleActions: \"play none none none\",\n          },\n        }\n      );\n    }\n  }, [index]);\n  \n  const handleCustomize = () => {\n    setSelectedShoe(shoe);\n    setCustomizerOpen(true);\n  };\n  \n  const handleHover = (isHovering: boolean) => {\n    if (cardRef.current) {\n      gsap.to(cardRef.current, {\n        y: isHovering ? -10 : 0,\n        duration: 0.4,\n        ease: \"power2.out\",\n      });\n    }\n    \n    if (canvasContainerRef.current) {\n      gsap.to(canvasContainerRef.current, {\n        scale: isHovering ? 1.05 : 1,\n        duration: 0.4,\n        ease: \"power2.out\",\n      });\n    }\n  };\n  \n  return (\n    <div\n      ref={cardRef}\n      className=\"glass-effect rounded-2xl overflow-hidden cursor-pointer group\"\n      onMouseEnter={() => handleHover(true)}\n      onMouseLeave={() => handleHover(false)}\n      onClick={handleCustomize}\n      role=\"button\"\n      tabIndex={0}\n      aria-label={`View ${shoe.name}`}\n      onKeyPress={(e) => {\n        if (e.key === \"Enter\" || e.key === \" \") {\n          handleCustomize();\n        }\n      }}\n    >\n      {/* 3D Preview */}\n      <div\n        ref={canvasContainerRef}\n        className=\"w-full h-64 relative overflow-hidden bg-gradient-to-br from-luxsole-forest to-luxsole-dark-green\"\n      >\n        <Canvas\n          shadows\n          dpr={[1, 1.5]}\n          gl={{ antialias: true }}\n        >\n          <PerspectiveCamera makeDefault position={[0, 1, 4]} fov={50} />\n          <ambientLight intensity={0.5} />\n          <spotLight\n            position={[5, 5, 5]}\n            angle={0.3}\n            penumbra={0.5}\n            intensity={2}\n            castShadow\n          />\n          <Environment preset=\"studio\" />\n          \n          <ShoeModel\n            baseColor={shoe.baseColor}\n            accentColor={shoe.accentColor}\n            material={shoe.material}\n            scale={2}\n            useAdvancedShaders={useAdvancedShaders}\n          />\n          \n          <OrbitControls\n            enableZoom={false}\n            enablePan={false}\n            autoRotate\n            autoRotateSpeed={2}\n          />\n        </Canvas>\n        \n        {/* Overlay gradient on hover */}\n        <div className=\"absolute inset-0 bg-gradient-to-t from-luxsole-gold/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none\" />\n      </div>\n      \n      {/* Info Section */}\n      <div className=\"p-6 space-y-4\">\n        <div>\n          <h3 className=\"text-xl font-bold text-white group-hover:text-luxsole-emerald transition-colors duration-300\">\n            {shoe.name}\n          </h3>\n          <p className=\"text-sm text-gray-400 capitalize mt-1\">\n            {shoe.material} Finish\n          </p>\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-2xl font-bold text-luxsole-gold\">\n            ${shoe.price}\n          </span>\n          \n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              handleCustomize();\n            }}\n            className=\"px-4 py-2 bg-luxsole-emerald hover:bg-luxsole-gold text-luxsole-forest font-medium rounded-lg transition-all duration-300 hover:scale-105 active:scale-95\"\n            aria-label={`Customize ${shoe.name}`}\n          >\n            Customize\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function Gallery() {\n  const sectionRef = useRef<HTMLDivElement>(null);\n  \n  useEffect(() => {\n    if (sectionRef.current) {\n      gsap.fromTo(\n        sectionRef.current.querySelector(\"h2\"),\n        { opacity: 0, y: 30 },\n        {\n          opacity: 1,\n          y: 0,\n          duration: 1,\n          ease: \"power3.out\",\n          scrollTrigger: {\n            trigger: sectionRef.current,\n            start: \"top center+=100\",\n            toggleActions: \"play none none none\",\n          },\n        }\n      );\n    }\n  }, []);\n  \n  return (\n    <section\n      id=\"gallery\"\n      ref={sectionRef}\n      className=\"min-h-screen py-20 px-4 sm:px-6 lg:px-8 bg-luxsole-neutral\"\n    >\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-6xl font-bold text-luxsole-gradient mb-4\">\n            The Collection\n          </h2>\n          <p className=\"text-gray-400 text-lg max-w-2xl mx-auto\">\n            Explore the Craft\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {DEFAULT_SHOES.map((shoe, index) => (\n            <GalleryItem key={shoe.id} shoe={shoe} index={index} />\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6040},"client/src/components/ui/sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":894},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5639},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-1 ring-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2143},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\nimport glsl from \"vite-plugin-glsl\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    glsl(), // Add GLSL shader support\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  // Add support for large models and audio files\n  assetsInclude: [\"**/*.gltf\", \"**/*.glb\", \"**/*.mp3\", \"**/*.ogg\", \"**/*.wav\"],\n});\n","size_bytes":896},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5124},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1598},"client/src/utils/three/materials.ts":{"content":"import * as THREE from \"three\";\nimport type { MaterialType } from \"@/lib/stores/useLuxSole\";\n\n/**\n * Material configurations for different shoe materials\n * Each material has unique PBR properties for realistic rendering\n */\n\nexport interface MaterialConfig {\n  roughness: number;\n  metalness: number;\n  clearcoat?: number;\n  clearcoatRoughness?: number;\n  sheen?: number;\n  sheenRoughness?: number;\n  sheenColor?: THREE.Color;\n  anisotropy?: number;\n}\n\nexport const MATERIAL_CONFIGS: Record<MaterialType, MaterialConfig> = {\n  // Leather: Low metalness, medium roughness, subtle clearcoat\n  leather: {\n    roughness: 0.4,\n    metalness: 0.1,\n    clearcoat: 0.3,\n    clearcoatRoughness: 0.3,\n  },\n  \n  // Nubuck: High roughness, no metalness, soft appearance\n  nubuck: {\n    roughness: 0.9,\n    metalness: 0.0,\n    sheen: 0.5,\n    sheenRoughness: 0.8,\n    sheenColor: new THREE.Color(0.9, 0.9, 0.9),\n  },\n  \n  // Glint: Metallic with anisotropic reflections\n  glint: {\n    roughness: 0.2,\n    metalness: 0.8,\n    clearcoat: 0.5,\n    clearcoatRoughness: 0.1,\n    anisotropy: 0.7,\n  },\n  \n  // Knit: Fabric-like with sheen\n  knit: {\n    roughness: 0.7,\n    metalness: 0.0,\n    sheen: 0.8,\n    sheenRoughness: 0.6,\n    sheenColor: new THREE.Color(0.95, 0.95, 0.95),\n  },\n};\n\n/**\n * Create a PBR material for shoe rendering\n * @param materialType - Type of material (leather, nubuck, glint, knit)\n * @param baseColor - Base color of the material\n * @param envMap - Environment map for reflections\n */\nexport function createShoeMaterial(\n  materialType: MaterialType,\n  baseColor: string | THREE.Color,\n  envMap?: THREE.Texture | null\n): THREE.MeshPhysicalMaterial {\n  const config = MATERIAL_CONFIGS[materialType];\n  const color = typeof baseColor === \"string\" ? new THREE.Color(baseColor) : baseColor;\n  \n  const material = new THREE.MeshPhysicalMaterial({\n    color,\n    roughness: config.roughness,\n    metalness: config.metalness,\n    envMap: envMap || null,\n    envMapIntensity: 1.5,\n  });\n  \n  // Apply clearcoat for glossy materials\n  if (config.clearcoat !== undefined) {\n    material.clearcoat = config.clearcoat;\n    material.clearcoatRoughness = config.clearcoatRoughness || 0;\n  }\n  \n  // Apply sheen for fabric-like materials\n  if (config.sheen !== undefined) {\n    material.sheen = config.sheen;\n    material.sheenRoughness = config.sheenRoughness || 0.5;\n    if (config.sheenColor) {\n      material.sheenColor = config.sheenColor;\n    }\n  }\n  \n  return material;\n}\n\n/**\n * Lerp between two materials for smooth transitions\n * @param mat1 - First material\n * @param mat2 - Second material\n * @param alpha - Interpolation factor (0-1)\n */\nexport function lerpMaterials(\n  mat1: THREE.MeshPhysicalMaterial,\n  mat2: THREE.MeshPhysicalMaterial,\n  alpha: number\n): void {\n  mat1.roughness = THREE.MathUtils.lerp(mat1.roughness, mat2.roughness, alpha);\n  mat1.metalness = THREE.MathUtils.lerp(mat1.metalness, mat2.metalness, alpha);\n  \n  if (mat1.clearcoat !== undefined && mat2.clearcoat !== undefined) {\n    mat1.clearcoat = THREE.MathUtils.lerp(mat1.clearcoat, mat2.clearcoat, alpha);\n  }\n  \n  if (mat1.sheen !== undefined && mat2.sheen !== undefined) {\n    mat1.sheen = THREE.MathUtils.lerp(mat1.sheen, mat2.sheen, alpha);\n  }\n  \n  mat1.color.lerp(mat2.color, alpha);\n}\n\n/**\n * Environment map URLs\n * TODO: Replace with actual HDR environment maps for production\n */\nexport const ENVIRONMENT_MAPS = {\n  studio: \"/environments/studio.hdr\",\n  runway: \"/environments/runway.hdr\",\n  dusk: \"/environments/dusk.hdr\",\n};\n","size_bytes":3523},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1828},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":649},"client/src/components/luxsole/Customizer.tsx":{"content":"/**\n * Material Customizer Modal\n * \n * Live material and color customization with smooth transitions\n */\n\nimport { useEffect, useRef } from \"react\";\nimport { useLuxSole, type MaterialType } from \"@/lib/stores/useLuxSole\";\nimport { X, Check } from \"lucide-react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls, PerspectiveCamera, Environment } from \"@react-three/drei\";\nimport ShoeModel from \"@/models/ShoeModel\";\nimport gsap from \"gsap\";\n\nconst MATERIALS: { type: MaterialType; label: string; description: string }[] = [\n  { type: \"leather\", label: \"Premium Leather\", description: \"Classic luxury finish\" },\n  { type: \"nubuck\", label: \"Soft Nubuck\", description: \"Velvety texture\" },\n  { type: \"glint\", label: \"Metallic Glint\", description: \"Reflective elegance\" },\n  { type: \"knit\", label: \"Technical Knit\", description: \"Modern performance\" },\n];\n\nconst COLOR_PRESETS = [\n  { name: \"Emerald\", base: \"#1FA07A\", accent: \"#E1B75A\" },\n  { name: \"Forest\", base: \"#0F3F2B\", accent: \"#1FA07A\" },\n  { name: \"Gold\", base: \"#E1B75A\", accent: \"#072A1E\" },\n  { name: \"Midnight\", base: \"#072A1E\", accent: \"#E1B75A\" },\n  { name: \"Pure\", base: \"#FFFFFF\", accent: \"#1FA07A\" },\n  { name: \"Shadow\", base: \"#1a1a1a\", accent: \"#E1B75A\" },\n];\n\nexport default function Customizer() {\n  const {\n    isCustomizerOpen,\n    setCustomizerOpen,\n    customMaterial,\n    setCustomMaterial,\n    customBaseColor,\n    setCustomBaseColor,\n    customAccentColor,\n    setCustomAccentColor,\n    selectedShoe,\n    addToCart,\n    useAdvancedShaders,\n  } = useLuxSole();\n  \n  const modalRef = useRef<HTMLDivElement>(null);\n  const contentRef = useRef<HTMLDivElement>(null);\n  \n  useEffect(() => {\n    if (isCustomizerOpen && contentRef.current) {\n      gsap.fromTo(\n        contentRef.current,\n        { scale: 0.9, opacity: 0 },\n        { scale: 1, opacity: 1, duration: 0.4, ease: \"power3.out\" }\n      );\n    }\n  }, [isCustomizerOpen]);\n  \n  const handleClose = () => {\n    if (contentRef.current) {\n      gsap.to(contentRef.current, {\n        scale: 0.9,\n        opacity: 0,\n        duration: 0.3,\n        ease: \"power2.in\",\n        onComplete: () => setCustomizerOpen(false),\n      });\n    }\n  };\n  \n  const handleAddToCart = () => {\n    if (selectedShoe) {\n      const customShoe = {\n        ...selectedShoe,\n        baseColor: customBaseColor,\n        accentColor: customAccentColor,\n        material: customMaterial,\n      };\n      addToCart(customShoe);\n      \n      // Success animation\n      gsap.to(contentRef.current, {\n        scale: 1.05,\n        duration: 0.2,\n        yoyo: true,\n        repeat: 1,\n        ease: \"power2.inOut\",\n      });\n      \n      setTimeout(handleClose, 600);\n    }\n  };\n  \n  if (!isCustomizerOpen || !selectedShoe) return null;\n  \n  return (\n    <div\n      ref={modalRef}\n      className=\"fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/80 backdrop-blur-sm animate-fade-in\"\n      onClick={(e) => {\n        if (e.target === modalRef.current) {\n          handleClose();\n        }\n      }}\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-labelledby=\"customizer-title\"\n    >\n      <div\n        ref={contentRef}\n        className=\"w-full max-w-6xl bg-luxsole-forest rounded-2xl overflow-hidden shadow-2xl border border-luxsole-emerald/30\"\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-luxsole-emerald/20\">\n          <div>\n            <h2 id=\"customizer-title\" className=\"text-2xl font-bold text-luxsole-gradient\">\n              Customize Finish\n            </h2>\n            <p className=\"text-gray-400 text-sm mt-1\">{selectedShoe.name}</p>\n          </div>\n          <button\n            onClick={handleClose}\n            className=\"p-2 hover:bg-luxsole-emerald/20 rounded-lg transition-colors\"\n            aria-label=\"Close customizer\"\n          >\n            <X className=\"w-6 h-6 text-gray-400\" />\n          </button>\n        </div>\n        \n        {/* Content */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 p-6\">\n          {/* 3D Preview */}\n          <div className=\"h-[400px] lg:h-[500px] rounded-xl overflow-hidden bg-gradient-to-br from-luxsole-dark-green to-luxsole-neutral\">\n            <Canvas shadows dpr={[1, 2]}>\n              <PerspectiveCamera makeDefault position={[0, 1, 5]} fov={50} />\n              <ambientLight intensity={0.5} />\n              <spotLight position={[5, 5, 5]} angle={0.3} intensity={2} castShadow />\n              <spotLight position={[-5, 3, -3]} angle={0.4} intensity={1} color=\"#1FA07A\" />\n              \n              <Environment preset=\"studio\" />\n              \n              <ShoeModel\n                baseColor={customBaseColor}\n                accentColor={customAccentColor}\n                material={customMaterial}\n                scale={2.5}\n                useAdvancedShaders={useAdvancedShaders}\n              />\n              \n              <OrbitControls autoRotate autoRotateSpeed={1} enableZoom={false} />\n            </Canvas>\n          </div>\n          \n          {/* Controls */}\n          <div className=\"space-y-6\">\n            {/* Material Selection */}\n            <div>\n              <label className=\"block text-sm font-medium text-luxsole-emerald mb-3\">\n                Material Type\n              </label>\n              <div className=\"grid grid-cols-2 gap-3\">\n                {MATERIALS.map((mat) => (\n                  <button\n                    key={mat.type}\n                    onClick={() => setCustomMaterial(mat.type)}\n                    className={`p-4 rounded-lg border-2 transition-all duration-300 text-left ${\n                      customMaterial === mat.type\n                        ? \"border-luxsole-gold bg-luxsole-gold/10\"\n                        : \"border-luxsole-forest hover:border-luxsole-emerald/50 bg-luxsole-neutral\"\n                    }`}\n                    aria-pressed={customMaterial === mat.type}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div>\n                        <div className=\"font-medium text-white text-sm\">{mat.label}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{mat.description}</div>\n                      </div>\n                      {customMaterial === mat.type && (\n                        <Check className=\"w-5 h-5 text-luxsole-gold flex-shrink-0\" />\n                      )}\n                    </div>\n                  </button>\n                ))}\n              </div>\n            </div>\n            \n            {/* Color Presets */}\n            <div>\n              <label className=\"block text-sm font-medium text-luxsole-emerald mb-3\">\n                Color Preset\n              </label>\n              <div className=\"grid grid-cols-3 gap-3\">\n                {COLOR_PRESETS.map((preset) => (\n                  <button\n                    key={preset.name}\n                    onClick={() => {\n                      setCustomBaseColor(preset.base);\n                      setCustomAccentColor(preset.accent);\n                    }}\n                    className={`p-3 rounded-lg border-2 transition-all duration-300 hover:scale-105 active:scale-95 ${\n                      customBaseColor === preset.base && customAccentColor === preset.accent\n                        ? \"border-luxsole-gold\"\n                        : \"border-transparent hover:border-luxsole-emerald/50\"\n                    }`}\n                    aria-label={`${preset.name} color preset`}\n                  >\n                    <div className=\"flex gap-2 mb-2\">\n                      <div\n                        className=\"w-full h-8 rounded\"\n                        style={{ backgroundColor: preset.base }}\n                      />\n                      <div\n                        className=\"w-full h-8 rounded\"\n                        style={{ backgroundColor: preset.accent }}\n                      />\n                    </div>\n                    <div className=\"text-xs text-center text-gray-300\">{preset.name}</div>\n                  </button>\n                ))}\n              </div>\n            </div>\n            \n            {/* Custom Color Pickers */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label htmlFor=\"base-color\" className=\"block text-sm font-medium text-gray-300 mb-2\">\n                  Base Color\n                </label>\n                <input\n                  id=\"base-color\"\n                  type=\"color\"\n                  value={customBaseColor}\n                  onChange={(e) => setCustomBaseColor(e.target.value)}\n                  className=\"w-full h-12 rounded-lg cursor-pointer border-2 border-luxsole-forest hover:border-luxsole-emerald/50 transition-colors\"\n                />\n              </div>\n              <div>\n                <label htmlFor=\"accent-color\" className=\"block text-sm font-medium text-gray-300 mb-2\">\n                  Accent Color\n                </label>\n                <input\n                  id=\"accent-color\"\n                  type=\"color\"\n                  value={customAccentColor}\n                  onChange={(e) => setCustomAccentColor(e.target.value)}\n                  className=\"w-full h-12 rounded-lg cursor-pointer border-2 border-luxsole-forest hover:border-luxsole-emerald/50 transition-colors\"\n                />\n              </div>\n            </div>\n            \n            {/* Add to Cart Button */}\n            <button\n              onClick={handleAddToCart}\n              className=\"w-full py-4 bg-luxsole-gold hover:bg-luxsole-emerald text-luxsole-forest font-bold rounded-lg transition-all duration-300 hover:scale-[1.02] active:scale-[0.98] animate-gold-pulse\"\n            >\n              Add to Collection — ${selectedShoe.price}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9877},"client/src/components/ui/interface.tsx":{"content":"import { useEffect } from \"react\";\nimport { useGame } from \"@/lib/stores/useGame\";\nimport { useAudio } from \"@/lib/stores/useAudio\";\nimport { Button } from \"./button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"./card\";\nimport { VolumeX, Volume2, RotateCw, Trophy } from \"lucide-react\";\n\nexport function Interface() {\n  const restart = useGame((state) => state.restart);\n  const phase = useGame((state) => state.phase);\n  const { isMuted, toggleMute } = useAudio();\n\n  // Handle clicks on the interface in the ready phase to start the game\n  useEffect(() => {\n    if (phase === \"ready\") {\n      const handleClick = () => {\n        const activeElement = document.activeElement;\n        if (activeElement && 'blur' in activeElement) {\n          (activeElement as HTMLElement).blur();\n        }\n        const event = new KeyboardEvent(\"keydown\", { code: \"Space\" });\n        window.dispatchEvent(event);\n      };\n\n      window.addEventListener(\"click\", handleClick);\n      return () => window.removeEventListener(\"click\", handleClick);\n    }\n  }, [phase]);\n\n  return (\n    <>\n      {/* Top-right corner UI controls */}\n      <div className=\"fixed top-4 right-4 flex gap-2 z-10\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={toggleMute}\n          title={isMuted ? \"Unmute\" : \"Mute\"}\n        >\n          {isMuted ? <VolumeX size={18} /> : <Volume2 size={18} />}\n        </Button>\n        \n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={restart}\n          title=\"Restart Game\"\n        >\n          <RotateCw size={18} />\n        </Button>\n      </div>\n      \n      {/* Game completion overlay */}\n      {phase === \"ended\" && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-20 bg-black/30\">\n          <Card className=\"w-full max-w-md mx-4 shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-center gap-2\">\n                <Trophy className=\"text-yellow-500\" />\n                Level Complete!\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent>\n              <p className=\"text-center text-muted-foreground\">\n                Congratulations! You successfully navigated the course.\n              </p>\n            </CardContent>\n            \n            <CardFooter className=\"flex justify-center\">\n              <Button onClick={restart} className=\"w-full\">\n                Play Again\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      )}\n      \n      {/* Instructions panel */}\n      <div className=\"fixed bottom-4 left-4 z-10\">\n        <Card className=\"w-auto max-w-xs bg-background/80 backdrop-blur-sm\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-medium mb-2\">Controls:</h3>\n            <ul className=\"text-sm space-y-1 text-muted-foreground\">\n              <li>WASD or Arrow Keys: Move the ball</li>\n              <li>Space: Jump</li>\n              <li>R: Restart game</li>\n              <li>M: Toggle sound</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":3180},"client/src/lib/stores/useAudio.tsx":{"content":"import { create } from \"zustand\";\n\ninterface AudioState {\n  backgroundMusic: HTMLAudioElement | null;\n  hitSound: HTMLAudioElement | null;\n  successSound: HTMLAudioElement | null;\n  isMuted: boolean;\n  \n  // Setter functions\n  setBackgroundMusic: (music: HTMLAudioElement) => void;\n  setHitSound: (sound: HTMLAudioElement) => void;\n  setSuccessSound: (sound: HTMLAudioElement) => void;\n  \n  // Control functions\n  toggleMute: () => void;\n  playHit: () => void;\n  playSuccess: () => void;\n}\n\nexport const useAudio = create<AudioState>((set, get) => ({\n  backgroundMusic: null,\n  hitSound: null,\n  successSound: null,\n  isMuted: true, // Start muted by default\n  \n  setBackgroundMusic: (music) => set({ backgroundMusic: music }),\n  setHitSound: (sound) => set({ hitSound: sound }),\n  setSuccessSound: (sound) => set({ successSound: sound }),\n  \n  toggleMute: () => {\n    const { isMuted } = get();\n    const newMutedState = !isMuted;\n    \n    // Just update the muted state\n    set({ isMuted: newMutedState });\n    \n    // Log the change\n    console.log(`Sound ${newMutedState ? 'muted' : 'unmuted'}`);\n  },\n  \n  playHit: () => {\n    const { hitSound, isMuted } = get();\n    if (hitSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Hit sound skipped (muted)\");\n        return;\n      }\n      \n      // Clone the sound to allow overlapping playback\n      const soundClone = hitSound.cloneNode() as HTMLAudioElement;\n      soundClone.volume = 0.3;\n      soundClone.play().catch(error => {\n        console.log(\"Hit sound play prevented:\", error);\n      });\n    }\n  },\n  \n  playSuccess: () => {\n    const { successSound, isMuted } = get();\n    if (successSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Success sound skipped (muted)\");\n        return;\n      }\n      \n      successSound.currentTime = 0;\n      successSound.play().catch(error => {\n        console.log(\"Success sound play prevented:\", error);\n      });\n    }\n  }\n}));\n","size_bytes":2025},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"server/storage.ts":{"content":"import { users, type User, type InsertUser } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.currentId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1012},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: cn(\n          \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\n          props.mode === \"range\"\n            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\n            : \"[&:has([aria-selected])]:rounded-md\"\n        ),\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_start: \"day-range-start\",\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2935},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1140},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1148},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1012},"replit.md":{"content":"# LuxSole — Interactive 3D Shoes Studio\n\n## Overview\n\nLuxSole is a production-ready, interactive Three.js website for showcasing luxury footwear with immersive 3D experiences, cinematic animations, and real-time material customization. The application combines advanced 3D rendering with a sophisticated dark-green luxury color palette to create a premium e-commerce experience.\n\nThe project delivers a complete interactive shoe studio with features including:\n- Fullscreen 3D hero scene with interactive shoe rotation\n- Product gallery with 3D preview hover interactions\n- Live material and color customization system\n- Cinematic storytelling with scroll-driven scene transitions\n- Shopping cart functionality with polished animations\n- Keyboard-controlled 3D navigation\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework Stack:**\n- React 18 with TypeScript for type-safe component development\n- Vite as the build tool and dev server for fast development\n- Tailwind CSS with custom LuxSole theme for utility-first styling\n\n**3D Rendering Pipeline:**\n- Three.js (r152+) as the core WebGL rendering engine\n- @react-three/fiber for React integration with Three.js scene graph\n- @react-three/drei for common 3D utilities (cameras, controls, loaders, environments)\n- @react-three/postprocessing for visual effects (bloom, antialiasing)\n\n**Animation System:**\n- GSAP for UI and DOM animations with timeline coordination\n- ScrollTrigger plugin for scroll-driven animations\n- React Three Fiber's useFrame for 3D animation loops\n- Integrated shader animations for material effects\n\n**State Management:**\n- Zustand stores (useLuxSole) for global application state\n- Local component state with React hooks\n- State includes: current view, cart items, customization settings, loading progress\n\n**Component Structure:**\n- `/components/luxsole/` - Main application components (Hero, Gallery, Story, Customizer, Cart, Navigation, Loader)\n- `/components/ui/` - Radix UI-based design system components\n- `/scene/` - Three.js scene components (HeroScene)\n- `/models/` - 3D model components with LOD system\n\n**3D Model System:**\n- Procedurally generated placeholder shoe with PBR materials\n- Three-tier LOD (Level of Detail) system for performance optimization\n- Material system supporting: leather, nubuck, metallic glint, technical knit\n- Real-time material switching with crossfade transitions\n\n**Design System:**\n- LuxSole luxury color palette: dark green (#0F3F2B), emerald (#1FA07A), forest (#072A1E), gold (#E1B75A)\n- Consistent spacing, typography, and animation timing\n- Accessible UI patterns with ARIA labels and keyboard navigation\n\n### Backend Architecture\n\n**Server Framework:**\n- Express.js for HTTP server and API routing\n- Development mode uses Vite middleware for HMR\n- Production mode serves static assets from `/dist/public`\n\n**Development Workflow:**\n- Vite dev server with custom logger\n- Hot Module Replacement (HMR) over WebSocket\n- Runtime error overlay for debugging\n- TypeScript compilation with path aliases (@/, @shared/)\n\n**Build Process:**\n- Vite bundles client-side code to `/dist/public`\n- esbuild bundles server code to `/dist`\n- GLSL shader support via vite-plugin-glsl\n- Asset optimization for 3D models (GLTF/GLB with DRACO compression)\n\n**Route Structure:**\n- `/api/*` - API endpoints (defined in server/routes.ts)\n- `/*` - Fallback to index.html for client-side routing\n- Static assets served from `/client/public`\n\n### Data Storage Solutions\n\n**Database:**\n- PostgreSQL via Neon serverless driver (@neondatabase/serverless)\n- Drizzle ORM for type-safe database queries\n- Schema defined in `/shared/schema.ts` for sharing between client and server\n\n**Schema Design:**\n- Users table with username/password authentication\n- Prepared for future extensions (products, orders, customizations)\n\n**Session Management:**\n- Connect-pg-simple for PostgreSQL-backed sessions\n- Enables persistent cart and user preferences\n\n**In-Memory Storage:**\n- MemStorage class provides development/testing storage interface\n- Implements IStorage interface for CRUD operations\n- Production uses database-backed storage\n\n### External Dependencies\n\n**UI Component Library:**\n- Radix UI primitives for accessible, unstyled components\n- Components include: Dialog, Dropdown, Tooltip, Accordion, Tabs, etc.\n- Styled with Tailwind utilities following LuxSole design system\n\n**3D Asset Pipeline:**\n- GLTFLoader for loading 3D shoe models\n- DRACO compression support for optimized model delivery\n- HDR environment maps for realistic lighting and reflections\n- Placeholder procedural geometry until production models are added\n\n**Animation & Interaction:**\n- GSAP ScrollTrigger for scroll-driven animations\n- React Three Fiber's orbital controls for 3D camera manipulation\n- Keyboard controls for accessibility (Arrow keys, WASD, +/-)\n\n**Performance Optimization:**\n- Postprocessing effects with selective bloom\n- LOD system automatically switches model detail based on camera distance\n- Asset preloading with progress tracking\n- Lazy loading for 3D scenes via React Suspense\n\n**PWA Support:**\n- Web app manifest for installability\n- Service worker ready structure\n- Offline-first asset caching strategy\n\n**Development Tools:**\n- @replit/vite-plugin-runtime-error-modal for error display\n- TypeScript for type safety across client/server\n- ESLint and Prettier configurations (implied by project structure)\n\n**Deployment:**\n- Vercel configuration with custom headers for security and caching\n- Static asset caching (1 year for images, fonts, 3D models)\n- Security headers (X-Content-Type-Options, X-Frame-Options, CSP)\n\n**Query Management:**\n- TanStack Query (React Query) for server state management\n- Custom query client with credential handling\n- Configurable 401 behavior for authentication flows\n\n**Accessibility:**\n- Semantic HTML structure\n- ARIA labels on interactive elements\n- Keyboard navigation support throughout\n- Focus management in modals and dialogs\n- Screen reader friendly text alternatives","size_bytes":6090},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7480},"client/src/lib/stores/useLuxSole.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\n\nexport type AppView = \"hero\" | \"gallery\" | \"story\" | \"cart\";\nexport type Environment = \"studio\" | \"runway\" | \"dusk\";\nexport type MaterialType = \"leather\" | \"nubuck\" | \"glint\" | \"knit\";\n\nexport interface ShoeConfig {\n  id: string;\n  name: string;\n  baseColor: string;\n  accentColor: string;\n  material: MaterialType;\n  price: number;\n}\n\nexport interface CartItem extends ShoeConfig {\n  quantity: number;\n}\n\ninterface LuxSoleState {\n  // App state\n  currentView: AppView;\n  isLoading: boolean;\n  loadProgress: number;\n  isCustomizerOpen: boolean;\n  isDemoMode: boolean;\n  environment: Environment;\n  \n  // Shoe state\n  selectedShoe: ShoeConfig | null;\n  customMaterial: MaterialType;\n  customBaseColor: string;\n  customAccentColor: string;\n  \n  // Cart state\n  cart: CartItem[];\n  isCartOpen: boolean;\n  \n  // Camera state\n  isCameraAnimating: boolean;\n  \n  // Advanced rendering settings\n  useAdvancedShaders: boolean;\n  soundEnabled: boolean;\n  \n  // Actions\n  setCurrentView: (view: AppView) => void;\n  setLoading: (loading: boolean) => void;\n  setLoadProgress: (progress: number) => void;\n  setCustomizerOpen: (open: boolean) => void;\n  setDemoMode: (enabled: boolean) => void;\n  setEnvironment: (env: Environment) => void;\n  setSelectedShoe: (shoe: ShoeConfig | null) => void;\n  setCustomMaterial: (material: MaterialType) => void;\n  setCustomBaseColor: (color: string) => void;\n  setCustomAccentColor: (color: string) => void;\n  addToCart: (shoe: ShoeConfig) => void;\n  removeFromCart: (id: string) => void;\n  updateQuantity: (id: string, quantity: number) => void;\n  setCartOpen: (open: boolean) => void;\n  setCameraAnimating: (animating: boolean) => void;\n  setUseAdvancedShaders: (enabled: boolean) => void;\n  setSoundEnabled: (enabled: boolean) => void;\n}\n\n// Default shoe configurations\nexport const DEFAULT_SHOES: ShoeConfig[] = [\n  {\n    id: \"luxsole-emerald-runner\",\n    name: \"Emerald Runner\",\n    baseColor: \"#1FA07A\",\n    accentColor: \"#E1B75A\",\n    material: \"leather\",\n    price: 299,\n  },\n  {\n    id: \"luxsole-forest-elite\",\n    name: \"Forest Elite\",\n    baseColor: \"#0F3F2B\",\n    accentColor: \"#1FA07A\",\n    material: \"nubuck\",\n    price: 349,\n  },\n  {\n    id: \"luxsole-gold-prestige\",\n    name: \"Gold Prestige\",\n    baseColor: \"#E1B75A\",\n    accentColor: \"#072A1E\",\n    material: \"glint\",\n    price: 399,\n  },\n  {\n    id: \"luxsole-midnight-runner\",\n    name: \"Midnight Runner\",\n    baseColor: \"#072A1E\",\n    accentColor: \"#E1B75A\",\n    material: \"knit\",\n    price: 279,\n  },\n];\n\nexport const useLuxSole = create<LuxSoleState>()(\n  subscribeWithSelector((set, get) => ({\n    // Initial state\n    currentView: \"hero\",\n    isLoading: true,\n    loadProgress: 0,\n    isCustomizerOpen: false,\n    isDemoMode: false,\n    environment: \"studio\",\n    selectedShoe: DEFAULT_SHOES[0],\n    customMaterial: \"leather\",\n    customBaseColor: \"#1FA07A\",\n    customAccentColor: \"#E1B75A\",\n    cart: [],\n    isCartOpen: false,\n    isCameraAnimating: false,\n    useAdvancedShaders: true,\n    soundEnabled: false, // Muted by default\n    \n    // Actions\n    setCurrentView: (view) => set({ currentView: view }),\n    \n    setLoading: (loading) => set({ isLoading: loading }),\n    \n    setLoadProgress: (progress) => set({ loadProgress: Math.min(100, Math.max(0, progress)) }),\n    \n    setCustomizerOpen: (open) => set({ isCustomizerOpen: open }),\n    \n    setDemoMode: (enabled) => set({ isDemoMode: enabled }),\n    \n    setEnvironment: (env) => set({ environment: env }),\n    \n    setSelectedShoe: (shoe) => {\n      if (shoe) {\n        set({\n          selectedShoe: shoe,\n          customMaterial: shoe.material,\n          customBaseColor: shoe.baseColor,\n          customAccentColor: shoe.accentColor,\n        });\n      } else {\n        set({ selectedShoe: shoe });\n      }\n    },\n    \n    setCustomMaterial: (material) => set({ customMaterial: material }),\n    \n    setCustomBaseColor: (color) => set({ customBaseColor: color }),\n    \n    setCustomAccentColor: (color) => set({ customAccentColor: color }),\n    \n    addToCart: (shoe) => {\n      const { cart } = get();\n      const existingItem = cart.find((item) => item.id === shoe.id);\n      \n      if (existingItem) {\n        set({\n          cart: cart.map((item) =>\n            item.id === shoe.id\n              ? { ...item, quantity: item.quantity + 1 }\n              : item\n          ),\n        });\n      } else {\n        set({\n          cart: [...cart, { ...shoe, quantity: 1 }],\n        });\n      }\n    },\n    \n    removeFromCart: (id) => {\n      const { cart } = get();\n      set({\n        cart: cart.filter((item) => item.id !== id),\n      });\n    },\n    \n    updateQuantity: (id, quantity) => {\n      const { cart } = get();\n      if (quantity <= 0) {\n        get().removeFromCart(id);\n      } else {\n        set({\n          cart: cart.map((item) =>\n            item.id === id ? { ...item, quantity } : item\n          ),\n        });\n      }\n    },\n    \n    setCartOpen: (open) => set({ isCartOpen: open }),\n    \n    setCameraAnimating: (animating) => set({ isCameraAnimating: animating }),\n    \n    setUseAdvancedShaders: (enabled) => set({ useAdvancedShaders: enabled }),\n    \n    setSoundEnabled: (enabled) => set({ soundEnabled: enabled }),\n  }))\n);\n","size_bytes":5310},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nconst getLocalStorage = (key: string): any =>\n  JSON.parse(window.localStorage.getItem(key) || \"null\");\nconst setLocalStorage = (key: string, value: any): void =>\n  window.localStorage.setItem(key, JSON.stringify(value));\n\nexport { getLocalStorage, setLocalStorage };\n","size_bytes":438},"client/src/components/luxsole/Hero.tsx":{"content":"/**\n * Hero Landing Component\n * \n * Fullscreen hero section with 3D scene and layered UI\n */\n\nimport { useEffect, useRef } from \"react\";\nimport { useLuxSole } from \"@/lib/stores/useLuxSole\";\nimport HeroScene from \"@/scene/HeroScene\";\nimport { ChevronDown, Sparkles } from \"lucide-react\";\nimport gsap from \"gsap\";\n\nexport default function Hero() {\n  const { setCustomizerOpen, isDemoMode } = useLuxSole();\n  const heroRef = useRef<HTMLDivElement>(null);\n  const headingRef = useRef<HTMLHeadingElement>(null);\n  const subtitleRef = useRef<HTMLParagraphElement>(null);\n  const ctaRef = useRef<HTMLDivElement>(null);\n  \n  useEffect(() => {\n    // Synchronized entrance animations\n    const tl = gsap.timeline({ delay: 0.5 });\n    \n    if (headingRef.current) {\n      tl.fromTo(\n        headingRef.current,\n        { opacity: 0, y: 50 },\n        { opacity: 1, y: 0, duration: 1.2, ease: \"power3.out\" }\n      );\n    }\n    \n    if (subtitleRef.current) {\n      tl.fromTo(\n        subtitleRef.current,\n        { opacity: 0, y: 30 },\n        { opacity: 1, y: 0, duration: 1, ease: \"power3.out\" },\n        \"-=0.8\"\n      );\n    }\n    \n    if (ctaRef.current) {\n      tl.fromTo(\n        ctaRef.current,\n        { opacity: 0, scale: 0.9 },\n        { opacity: 1, scale: 1, duration: 0.8, ease: \"back.out(1.4)\" },\n        \"-=0.6\"\n      );\n    }\n  }, []);\n  \n  const scrollToGallery = () => {\n    const gallerySection = document.getElementById(\"gallery\");\n    if (gallerySection) {\n      gallerySection.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n  \n  return (\n    <section\n      id=\"hero\"\n      ref={heroRef}\n      className=\"relative w-full h-screen overflow-hidden bg-luxsole-neutral\"\n    >\n      {/* 3D Scene Background */}\n      <div className=\"absolute inset-0 z-0\">\n        <HeroScene />\n      </div>\n      \n      {/* Gradient Overlays */}\n      <div className=\"absolute inset-0 bg-gradient-to-b from-luxsole-neutral/30 via-transparent to-luxsole-neutral/80 z-10 pointer-events-none\" />\n      <div className=\"absolute inset-0 bg-gradient-to-r from-luxsole-forest/20 via-transparent to-luxsole-forest/20 z-10 pointer-events-none\" />\n      \n      {/* Content */}\n      <div className=\"relative z-20 h-full flex flex-col items-center justify-center px-4 sm:px-6 lg:px-8 text-center\">\n        <div className=\"max-w-4xl\">\n          {/* Badge */}\n          {isDemoMode && (\n            <div className=\"inline-flex items-center gap-2 px-4 py-2 mb-6 glass-effect rounded-full border border-luxsole-gold/30 animate-fade-in\">\n              <Sparkles className=\"w-4 h-4 text-luxsole-gold animate-pulse\" />\n              <span className=\"text-sm text-luxsole-gold font-medium\">\n                Demo Mode Active\n              </span>\n            </div>\n          )}\n          \n          {/* Main Heading */}\n          <h1\n            ref={headingRef}\n            className=\"text-5xl md:text-7xl lg:text-8xl font-bold mb-6 leading-tight\"\n          >\n            <span className=\"text-luxsole-gradient\">LUXSOLE</span>\n            <br />\n            <span className=\"text-white\">Elevated Footwear</span>\n          </h1>\n          \n          {/* Subtitle */}\n          <p\n            ref={subtitleRef}\n            className=\"text-lg md:text-xl text-gray-300 mb-12 max-w-2xl mx-auto leading-relaxed\"\n          >\n            Where precision craftsmanship meets innovative design. \n            Experience luxury reimagined for the modern connoisseur.\n          </p>\n          \n          {/* CTA Buttons */}\n          <div ref={ctaRef} className=\"flex flex-col sm:flex-row items-center justify-center gap-4\">\n            <button\n              onClick={() => setCustomizerOpen(true)}\n              className=\"px-8 py-4 bg-luxsole-gold hover:bg-luxsole-emerald text-luxsole-forest font-bold rounded-lg transition-all duration-300 hover:scale-105 active:scale-95 shadow-lg hover:shadow-luxsole-gold/50 animate-gold-pulse\"\n            >\n              Customize Finish\n            </button>\n            \n            <button\n              onClick={scrollToGallery}\n              className=\"px-8 py-4 glass-effect border-2 border-luxsole-emerald hover:border-luxsole-gold text-white hover:text-luxsole-gold font-bold rounded-lg transition-all duration-300 hover:scale-105 active:scale-95\"\n            >\n              Explore the Craft\n            </button>\n          </div>\n          \n          {/* Feature Pills */}\n          <div className=\"flex flex-wrap items-center justify-center gap-4 mt-12\">\n            {[\"Premium Materials\", \"Hand Crafted\", \"Limited Edition\"].map((feature) => (\n              <div\n                key={feature}\n                className=\"px-4 py-2 surface-highlight rounded-full border border-white/10 text-sm text-gray-400\"\n              >\n                {feature}\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        {/* Scroll Indicator */}\n        <button\n          onClick={scrollToGallery}\n          className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 flex flex-col items-center gap-2 text-luxsole-emerald hover:text-luxsole-gold transition-colors cursor-pointer animate-bounce\"\n          aria-label=\"Scroll to collection\"\n        >\n          <span className=\"text-sm font-medium\">Discover</span>\n          <ChevronDown className=\"w-6 h-6\" />\n        </button>\n      </div>\n      \n      {/* Keyboard Hint */}\n      <div className=\"absolute bottom-4 right-4 z-20 text-xs text-gray-500 glass-effect px-3 py-2 rounded-lg hidden lg:block\">\n        <kbd className=\"px-2 py-1 bg-luxsole-forest rounded\">Tab</kbd> + \n        <kbd className=\"px-2 py-1 bg-luxsole-forest rounded ml-1\">Arrows</kbd> to navigate 3D\n      </div>\n    </section>\n  );\n}\n","size_bytes":5690},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2001},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":533},"README.md":{"content":"# LuxSole — Interactive 3D Shoes Studio\n\nA production-ready, interactive Three.js website for showcasing luxury footwear with cinematic animations, material customization, and immersive 3D experiences.\n\n![LuxSole](https://img.shields.io/badge/LuxSole-Production%20Ready-0F3F2B?style=for-the-badge)\n![Three.js](https://img.shields.io/badge/Three.js-r170-000000?style=for-the-badge&logo=three.js)\n![React](https://img.shields.io/badge/React-18-61DAFB?style=for-the-badge&logo=react)\n![TypeScript](https://img.shields.io/badge/TypeScript-5.6-3178C6?style=for-the-badge&logo=typescript)\n\n## 🎨 Design Language\n\nThis project uses a sophisticated dark-green luxury palette:\n\n- **Primary Dark Green**: `#0F3F2B` - Main brand color\n- **Accent Emerald**: `#1FA07A` - Interactive elements\n- **Deep Forest**: `#072A1E` - Backgrounds and depth\n- **Warm Gold**: `#E1B75A` - Premium accents and CTAs\n- **Neutral Background**: `#0A0D0B` - Base background\n\n### Changing the Color Palette\n\nTo customize the color palette:\n\n1. **Tailwind Config** (`tailwind.config.ts`):\n   ```typescript\n   colors: {\n     luxsole: {\n       'dark-green': '#YOUR_COLOR',\n       'emerald': '#YOUR_COLOR',\n       // ... etc\n     }\n   }\n   ```\n\n2. **CSS Variables** (`client/src/index.css`):\n   ```css\n   :root {\n     --luxsole-dark-green: #YOUR_COLOR;\n     --luxsole-emerald: #YOUR_COLOR;\n     /* ... etc */\n   }\n   ```\n\n## 🚀 Quick Start\n\n### Prerequisites\n\n- Node.js 20+ (automatically configured in Replit)\n- npm or yarn\n\n### Installation\n\n```bash\n# Install dependencies\nnpm install\n\n# Start development server\nnpm run dev\n```\n\nThe application will be available at `http://localhost:5000`\n\n### Build for Production\n\n```bash\n# Build the application\nnpm run build\n\n# Preview production build\nnpm run start\n```\n\n## 📁 Project Structure\n\n```\nluxsole/\n├── client/\n│   ├── public/\n│   │   ├── manifest.json          # PWA manifest\n│   │   ├── models/                # 3D model files (GLB/GLTF)\n│   │   └── environments/          # HDR environment maps\n│   ├── src/\n│   │   ├── components/\n│   │   │   ├── luxsole/           # Main components\n│   │   │   │   ├── Loader.tsx     # Cinematic loader\n│   │   │   │   ├── Navigation.tsx # Main navigation\n│   │   │   │   ├── Hero.tsx       # Hero landing section\n│   │   │   │   ├── Gallery.tsx    # Product gallery\n│   │   │   │   ├── Customizer.tsx # Material customizer modal\n│   │   │   │   ├── Story.tsx      # Scroll-driven storytelling\n│   │   │   │   └── Cart.tsx       # Shopping cart\n│   │   │   └── ui/                # Reusable UI components\n│   │   ├── scene/\n│   │   │   └── HeroScene.tsx      # Main 3D hero scene\n│   │   ├── models/\n│   │   │   └── ShoeModel.tsx      # Procedural shoe model\n│   │   ├── utils/\n│   │   │   └── three/\n│   │   │       └── materials.ts   # PBR material utilities\n│   │   ├── lib/\n│   │   │   └── stores/\n│   │   │       └── useLuxSole.tsx # Main state management\n│   │   ├── App.tsx                # Main app component\n│   │   ├── main.tsx               # Entry point\n│   │   └── index.css              # Global styles\n│   └── index.html                 # HTML template with SEO\n├── server/                        # Express server\n├── vercel.json                    # Vercel deployment config\n├── netlify.toml                   # Netlify deployment config\n└── README.md\n```\n\n## 🎮 Features\n\n### Core Features\n\n- ✅ **Fullscreen 3D Hero** - Interactive rotating shoe with orbit controls\n- ✅ **Product Gallery** - 3D preview tiles with hover micro-interactions\n- ✅ **Material Customizer** - Live material switching (leather, nubuck, glint, knit)\n- ✅ **Cinematic Animations** - GSAP-powered synchronized entrance animations\n- ✅ **Scroll-Driven Storytelling** - Environment transitions with camera choreography\n- ✅ **Shopping Cart** - Polished micro-animations and tactile feedback\n- ✅ **Demo Mode** - Automated cinematic showreel on idle\n- ✅ **Responsive Design** - Optimized for all screen sizes\n- ✅ **Accessibility** - Keyboard controls, ARIA labels, semantic HTML\n- ✅ **PWA Ready** - Progressive Web App with manifest\n\n### Technical Features\n\n- ✅ **PBR Materials** - Physically-based rendering with HDR environment maps\n- ✅ **Post-Processing** - Bloom effects and tone mapping\n- ✅ **Performance Optimized** - Pixel ratio capping, lazy loading\n- ✅ **LOD System** - Level of detail for better performance\n- ✅ **Contact Shadows** - Soft realistic shadows\n- ✅ **Volumetric Fog** - Atmospheric depth\n\n## 🔄 Swapping 3D Models\n\nThe current implementation uses a **procedurally generated placeholder shoe model**. To use production GLB files:\n\n### 1. Add Your GLB Files\n\nPlace your production GLB files in `/client/public/models/`:\n\n```\nclient/public/models/\n├── luxsole-emerald-runner.glb\n├── luxsole-forest-elite.glb\n├── luxsole-gold-prestige.glb\n└── luxsole-midnight-runner.glb\n```\n\n### 2. Update ShoeModel Component\n\nReplace the procedural model in `client/src/models/ShoeModel.tsx`:\n\n```tsx\nimport { useGLTF } from \"@react-three/drei\";\n\n// Load production model\nconst ShoeModel = ({ modelPath, baseColor, accentColor, ...props }) => {\n  const { scene } = useGLTF(modelPath);\n  \n  // Apply materials to the loaded model\n  useEffect(() => {\n    scene.traverse((child) => {\n      if (child.isMesh) {\n        // Apply custom materials based on mesh name\n        if (child.name.includes('base')) {\n          child.material = createShoeMaterial(material, baseColor);\n        }\n        // ... etc\n      }\n    });\n  }, [scene, baseColor, accentColor, material]);\n  \n  return <primitive object={scene.clone()} {...props} />;\n};\n```\n\n### 3. Update Shoe Configs\n\nIn `client/src/lib/stores/useLuxSole.tsx`, add model paths:\n\n```tsx\nexport const DEFAULT_SHOES: ShoeConfig[] = [\n  {\n    id: \"luxsole-emerald-runner\",\n    name: \"Emerald Runner\",\n    modelPath: \"/models/luxsole-emerald-runner.glb\",\n    // ... etc\n  },\n];\n```\n\n### 4. DRACO Compression (Optional)\n\nFor smaller file sizes, compress your GLB files with DRACO:\n\n```bash\n# Install gltf-pipeline\nnpm install -g gltf-pipeline\n\n# Compress GLB\ngltf-pipeline -i model.glb -o model-compressed.glb -d\n```\n\n## 🎬 Customizing Animations\n\n### GSAP Timelines\n\nMain entrance animations are in `client/src/components/luxsole/Hero.tsx`:\n\n```tsx\nconst tl = gsap.timeline({ delay: 0.5 });\n\ntl.fromTo(\n  headingRef.current,\n  { opacity: 0, y: 50 },\n  { opacity: 1, y: 0, duration: 1.2, ease: \"power3.out\" }\n);\n```\n\n### Material Transitions\n\nMaterial transitions in `client/src/utils/three/materials.ts`:\n\n```tsx\nexport function lerpMaterials(mat1, mat2, alpha) {\n  mat1.roughness = THREE.MathUtils.lerp(mat1.roughness, mat2.roughness, alpha);\n  // Adjust alpha value (0-1) for transition speed\n}\n```\n\n### Camera Animations\n\nCamera paths in `client/src/components/luxsole/Story.tsx`:\n\n```tsx\n// Modify camera path based on scroll\nconst angle = scrollProgress * Math.PI * 2; // Change multiplier for rotation speed\nconst radius = 5 - scrollProgress * 2;      // Change for distance\nconst height = 1 + Math.sin(scrollProgress * Math.PI) * 1.5; // Change for height variation\n```\n\n## 💡 Lighting Adjustments\n\nModify lighting in `client/src/scene/HeroScene.tsx`:\n\n```tsx\n<SpotLight\n  position={[5, 8, 5]}\n  angle={0.3}              // Adjust spotlight cone\n  penumbra={0.5}           // Adjust edge softness\n  intensity={2}            // Adjust brightness\n  color=\"#ffffff\"          // Change color\n/>\n```\n\n## 🧪 Testing Checklist\n\n- [ ] **Run dev server**: `npm run dev`\n- [ ] **Verify loader**: Check animated loader appears and completes\n- [ ] **Interact with 3D shoe**: Test orbit controls (mouse drag, scroll zoom)\n- [ ] **Test keyboard navigation**: Tab + Arrow keys to rotate\n- [ ] **Open customizer**: Click \"Customize Finish\" button\n- [ ] **Change materials**: Switch between leather, nubuck, glint, knit\n- [ ] **Test color presets**: Click different color combinations\n- [ ] **Add to cart**: Customize and add items to cart\n- [ ] **Gallery interaction**: Hover over gallery items, check 3D previews\n- [ ] **Scroll storytelling**: Scroll through story section, watch camera animation\n- [ ] **Demo mode**: Enable demo mode, watch auto-rotation\n- [ ] **Mobile responsiveness**: Test on mobile viewport (< 768px)\n- [ ] **Accessibility**: Test keyboard navigation throughout\n- [ ] **Build production**: `npm run build` should complete without errors\n\n## 📱 Responsive Breakpoints\n\n- **Mobile**: < 768px\n- **Tablet**: 768px - 1024px\n- **Desktop**: > 1024px\n\nPerformance optimizations automatically scale based on device:\n- Mobile: Lower LOD, reduced pixel ratio\n- Desktop: Full quality rendering\n\n## 🔧 Performance Optimization\n\n### Current Optimizations\n\n- ✅ Pixel ratio capped at 2\n- ✅ Lazy loading for non-visible models\n- ✅ Render throttling when inactive\n- ✅ Asset compression\n- ✅ Code splitting\n\n### Additional Recommendations\n\n1. **Use DRACO compression** for GLB files (reduces file size by ~60%)\n2. **Lazy load environments** - Load HDR maps on demand\n3. **Implement progressive loading** - Load low-res first, then high-res\n4. **Use texture compression** - KTX2 format for better GPU performance\n\n## 🌐 Deployment\n\n### Vercel (Recommended)\n\n```bash\n# Install Vercel CLI\nnpm i -g vercel\n\n# Deploy\nvercel\n```\n\n### Netlify\n\n```bash\n# Install Netlify CLI\nnpm i -g netlify-cli\n\n# Deploy\nnetlify deploy --prod\n```\n\n### Manual Deployment\n\n1. Build: `npm run build`\n2. Upload `dist/public` folder to your hosting provider\n3. Configure redirects to serve `index.html` for all routes\n\n## 📚 Tech Stack\n\n- **React 18** - UI library\n- **TypeScript** - Type safety\n- **Vite** - Build tool\n- **Three.js r170** - 3D rendering\n- **@react-three/fiber** - React renderer for Three.js\n- **@react-three/drei** - Useful helpers for R3F\n- **@react-three/postprocessing** - Post-processing effects\n- **GSAP** - Animation library\n- **Zustand** - State management\n- **Tailwind CSS** - Utility-first CSS\n- **Framer Motion** - React animation library\n- **Lucide React** - Icon library\n\n## 🎯 Browser Support\n\n- Chrome/Edge 90+\n- Firefox 88+\n- Safari 14+\n- Opera 76+\n\n**Note**: WebGL 2.0 required. Fallback message shown for unsupported browsers.\n\n## 📄 License\n\nThis project is provided as-is for demonstration purposes.\n\n## 🙏 Credits\n\n### Assets & Resources\n\n- **Three.js** - https://threejs.org (MIT License)\n- **React Three Fiber** - https://github.com/pmndrs/react-three-fiber (MIT License)\n- **GSAP** - https://greensock.com/gsap (Free for most uses)\n- **Inter Font** - https://rsms.me/inter (SIL Open Font License)\n\n### Environment Maps\n\nProduction environment maps should be sourced from:\n- **Poly Haven** (CC0): https://polyhaven.com/hdris\n- **HDRI Haven** (CC0): https://hdrihaven.com\n\n## 🆘 Support\n\nFor issues or questions:\n1. Check the testing checklist above\n2. Review browser console for errors\n3. Ensure WebGL 2.0 is supported\n4. Verify all dependencies are installed\n\n## 🚧 Future Enhancements\n\n- [ ] Add E2E tests with Playwright\n- [ ] Implement subsurface scattering for materials\n- [ ] Add advanced shader effects (iridescence, anisotropy)\n- [ ] Create additional shoe models\n- [ ] Add sound design with Tone.js\n- [ ] Implement AR preview mode\n- [ ] Add user authentication\n- [ ] Build admin panel for product management\n\n---\n\n**Built with precision and passion** ✨\n\nFor production deployment, remember to:\n- Replace placeholder 3D models with production GLB files\n- Add actual HDR environment maps\n- Generate and add PWA icons\n- Update social media preview images\n- Configure analytics tracking\n","size_bytes":11937},"client/src/scene/HeroScene.tsx":{"content":"/**\n * Hero Scene Component\n * \n * Main 3D scene for the landing hero section with:\n * - Interactive rotating shoe with orbit controls\n * - Dramatic PBR lighting and HDR environment\n * - Volumetric fog and contact shadows\n * - Keyboard navigation support (Arrow keys/WASD to rotate, +/- to zoom)\n */\n\nimport { useRef, useEffect, Suspense } from \"react\";\nimport { Canvas, useFrame, useThree } from \"@react-three/fiber\";\nimport {\n  OrbitControls,\n  PerspectiveCamera,\n  Environment,\n  ContactShadows,\n  SpotLight,\n  useKeyboardControls,\n} from \"@react-three/drei\";\nimport { EffectComposer, Bloom } from \"@react-three/postprocessing\";\nimport * as THREE from \"three\";\nimport ShoeModel from \"@/models/ShoeModel\";\nimport { useLuxSole } from \"@/lib/stores/useLuxSole\";\n\n/**\n * Scene Lighting Component\n * Dramatic rim lighting with studio-style setup\n */\nfunction SceneLighting() {\n  return (\n    <>\n      {/* Key light */}\n      <SpotLight\n        position={[5, 8, 5]}\n        angle={0.3}\n        penumbra={0.5}\n        intensity={2}\n        castShadow\n        shadow-mapSize={[2048, 2048]}\n        color=\"#ffffff\"\n      />\n      \n      {/* Rim light (emerald) */}\n      <SpotLight\n        position={[-5, 5, -5]}\n        angle={0.4}\n        penumbra={0.8}\n        intensity={1.5}\n        color=\"#1FA07A\"\n      />\n      \n      {/* Gold accent light */}\n      <spotLight\n        position={[0, 10, -10]}\n        angle={0.5}\n        penumbra={1}\n        intensity={0.8}\n        color=\"#E1B75A\"\n      />\n      \n      {/* Ambient light */}\n      <ambientLight intensity={0.3} color=\"#0F3F2B\" />\n      \n      {/* Hemisphere light for subtle fill */}\n      <hemisphereLight\n        intensity={0.4}\n        color=\"#1FA07A\"\n        groundColor=\"#072A1E\"\n      />\n    </>\n  );\n}\n\n/**\n * Keyboard-controlled Camera Component\n * Handles keyboard input for camera rotation and zoom via OrbitControls\n */\nfunction KeyboardCamera() {\n  const controlsRef = useRef<any>(null);\n  const [, get] = useKeyboardControls();\n  const { camera } = useThree();\n  \n  useFrame((state, delta) => {\n    if (!controlsRef.current) return;\n    \n    const controls = get();\n    const rotationSpeed = 2 * delta;\n    const zoomSpeed = 2 * delta;\n    \n    // Get current spherical coordinates\n    const offset = new THREE.Vector3();\n    offset.copy(camera.position).sub(controlsRef.current.target);\n    \n    const spherical = new THREE.Spherical();\n    spherical.setFromVector3(offset);\n    \n    // Rotation via spherical coordinates\n    if (controls.rotateLeft) {\n      spherical.theta -= rotationSpeed;\n    }\n    if (controls.rotateRight) {\n      spherical.theta += rotationSpeed;\n    }\n    if (controls.rotateUp) {\n      spherical.phi = Math.max(\n        Math.PI / 4,\n        spherical.phi - rotationSpeed\n      );\n    }\n    if (controls.rotateDown) {\n      spherical.phi = Math.min(\n        Math.PI / 2,\n        spherical.phi + rotationSpeed\n      );\n    }\n    \n    // Apply rotation changes\n    if (controls.rotateLeft || controls.rotateRight || controls.rotateUp || controls.rotateDown) {\n      offset.setFromSpherical(spherical);\n      camera.position.copy(controlsRef.current.target).add(offset);\n      controlsRef.current.update();\n    }\n    \n    // Zoom\n    if (controls.zoomIn) {\n      spherical.radius = Math.max(3, spherical.radius - zoomSpeed);\n      offset.setFromSpherical(spherical);\n      camera.position.copy(controlsRef.current.target).add(offset);\n      controlsRef.current.update();\n    }\n    if (controls.zoomOut) {\n      spherical.radius = Math.min(8, spherical.radius + zoomSpeed);\n      offset.setFromSpherical(spherical);\n      camera.position.copy(controlsRef.current.target).add(offset);\n      controlsRef.current.update();\n    }\n  });\n  \n  return (\n    <OrbitControls\n      ref={controlsRef}\n      enablePan={false}\n      enableZoom={true}\n      minDistance={3}\n      maxDistance={8}\n      minPolarAngle={Math.PI / 4}\n      maxPolarAngle={Math.PI / 2}\n      autoRotate={false}\n      autoRotateSpeed={0.5}\n      dampingFactor={0.05}\n      rotateSpeed={0.5}\n      zoomSpeed={0.8}\n      makeDefault\n    />\n  );\n}\n\n/**\n * Animated Shoe Component\n * Handles shoe rotation and material transitions\n */\nfunction AnimatedShoe() {\n  const { selectedShoe, customMaterial, customBaseColor, customAccentColor, isDemoMode, useAdvancedShaders } =\n    useLuxSole();\n  const shoeRef = useRef<THREE.Group>(null);\n  const rotationSpeed = useRef(0);\n  \n  useFrame((state, delta) => {\n    if (shoeRef.current) {\n      // Auto-rotation in demo mode\n      if (isDemoMode) {\n        rotationSpeed.current = THREE.MathUtils.lerp(rotationSpeed.current, 0.3, 0.05);\n      } else {\n        rotationSpeed.current = THREE.MathUtils.lerp(rotationSpeed.current, 0, 0.05);\n      }\n      \n      shoeRef.current.rotation.y += rotationSpeed.current * delta;\n      \n      // Subtle floating animation\n      shoeRef.current.position.y = Math.sin(state.clock.elapsedTime * 0.5) * 0.05;\n    }\n  });\n  \n  if (!selectedShoe) return null;\n  \n  return (\n    <ShoeModel\n      ref={shoeRef}\n      baseColor={customBaseColor}\n      accentColor={customAccentColor}\n      material={customMaterial}\n      scale={2.5}\n      useAdvancedShaders={useAdvancedShaders}\n    />\n  );\n}\n\n/**\n * Volumetric Fog Effect\n */\nfunction Fog() {\n  return (\n    <fog attach=\"fog\" args={[\"#072A1E\", 8, 20]} />\n  );\n}\n\n/**\n * Main Hero Scene Component\n */\nexport default function HeroScene() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  \n  // Keyboard navigation support\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.key === \"Tab\" && canvasRef.current) {\n        e.preventDefault();\n        canvasRef.current.focus();\n      }\n    };\n    \n    window.addEventListener(\"keydown\", handleKeyPress);\n    return () => window.removeEventListener(\"keydown\", handleKeyPress);\n  }, []);\n  \n  return (\n    <div className=\"w-full h-full\" role=\"img\" aria-label=\"Interactive 3D shoe display\">\n      <Canvas\n        ref={canvasRef}\n        shadows\n        dpr={[1, 2]} // Limit pixel ratio for performance\n        gl={{\n          antialias: true,\n          toneMapping: THREE.ACESFilmicToneMapping,\n          toneMappingExposure: 1.2,\n        }}\n        tabIndex={0}\n        aria-label=\"3D canvas - use arrow keys or WASD to rotate, +/- to zoom\"\n      >\n        <Fog />\n        \n        {/* Camera */}\n        <PerspectiveCamera makeDefault position={[0, 1, 5]} fov={50} />\n        \n        {/* Lighting */}\n        <SceneLighting />\n        \n        {/* HDR Environment */}\n        <Suspense fallback={null}>\n          <Environment\n            preset=\"studio\"\n            background={false}\n            blur={0.8}\n          />\n        </Suspense>\n        \n        {/* Main Shoe Model with LOD */}\n        <Suspense fallback={null}>\n          <AnimatedShoe />\n        </Suspense>\n        \n        {/* Ground and Shadows */}\n        <ContactShadows\n          position={[0, -0.5, 0]}\n          opacity={0.5}\n          scale={10}\n          blur={2}\n          far={4}\n          color=\"#072A1E\"\n        />\n        \n        {/* Orbit Controls with keyboard support */}\n        <KeyboardCamera />\n        \n        {/* Post-processing */}\n        <EffectComposer>\n          <Bloom\n            intensity={0.5}\n            luminanceThreshold={0.9}\n            luminanceSmoothing={0.9}\n            mipmapBlur\n          />\n        </EffectComposer>\n      </Canvas>\n    </div>\n  );\n}\n","size_bytes":7419},"client/src/components/luxsole/Story.tsx":{"content":"/**\n * Story/Lookbook Component\n * \n * Scroll-driven cinematic storytelling section with\n * environment transitions and camera animations\n */\n\nimport { useRef, useEffect, useState } from \"react\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { PerspectiveCamera, Environment, OrbitControls } from \"@react-three/drei\";\nimport ShoeModel from \"@/models/ShoeModel\";\nimport * as THREE from \"three\";\nimport gsap from \"gsap\";\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\nimport { useLuxSole, DEFAULT_SHOES } from \"@/lib/stores/useLuxSole\";\n\ngsap.registerPlugin(ScrollTrigger);\n\ninterface StorySceneProps {\n  scrollProgress: number;\n}\n\nfunction StoryScene({ scrollProgress }: StorySceneProps) {\n  const cameraRef = useRef<THREE.PerspectiveCamera>(null);\n  const shoeRef = useRef<THREE.Group>(null);\n  \n  useFrame(() => {\n    if (cameraRef.current && shoeRef.current) {\n      // Camera path based on scroll\n      const angle = scrollProgress * Math.PI * 2;\n      const radius = 5 - scrollProgress * 2;\n      const height = 1 + Math.sin(scrollProgress * Math.PI) * 1.5;\n      \n      cameraRef.current.position.x = Math.sin(angle) * radius;\n      cameraRef.current.position.y = height;\n      cameraRef.current.position.z = Math.cos(angle) * radius;\n      cameraRef.current.lookAt(0, 0.5, 0);\n      \n      // Shoe rotation\n      shoeRef.current.rotation.y = scrollProgress * Math.PI * 4;\n    }\n  });\n  \n  // Determine environment based on scroll progress\n  const preset = scrollProgress < 0.33 ? \"studio\" : scrollProgress < 0.66 ? \"sunset\" : \"night\";\n  \n  return (\n    <>\n      <PerspectiveCamera ref={cameraRef} makeDefault position={[5, 1, 5]} fov={50} />\n      \n      <ambientLight intensity={0.4} />\n      <spotLight\n        position={[5, 8, 5]}\n        angle={0.3}\n        intensity={2}\n        castShadow\n        color={scrollProgress < 0.33 ? \"#ffffff\" : scrollProgress < 0.66 ? \"#ff8844\" : \"#4488ff\"}\n      />\n      \n      <Environment preset={preset} background={false} />\n      \n      <ShoeModel\n        ref={shoeRef}\n        baseColor={DEFAULT_SHOES[0].baseColor}\n        accentColor={DEFAULT_SHOES[0].accentColor}\n        material={DEFAULT_SHOES[0].material}\n        scale={2.5}\n      />\n      \n      {/* Ground plane */}\n      <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, -0.5, 0]} receiveShadow>\n        <planeGeometry args={[20, 20]} />\n        <meshStandardMaterial\n          color={scrollProgress < 0.33 ? \"#0F3F2B\" : scrollProgress < 0.66 ? \"#1a0a00\" : \"#000a1a\"}\n          roughness={0.8}\n        />\n      </mesh>\n    </>\n  );\n}\n\nconst STORY_SECTIONS = [\n  {\n    title: \"Studio Precision\",\n    subtitle: \"Where Craft Meets Vision\",\n    description: \"Every detail refined under the perfect light, where precision and artistry unite.\",\n    environment: \"studio\",\n  },\n  {\n    title: \"Runway Ready\",\n    subtitle: \"Born to Perform\",\n    description: \"From concept to catwalk, designed to make a statement with every step.\",\n    environment: \"runway\",\n  },\n  {\n    title: \"Urban Dusk\",\n    subtitle: \"The City Awaits\",\n    description: \"As day turns to night, your journey is just beginning. Step into the evening.\",\n    environment: \"dusk\",\n  },\n];\n\nexport default function Story() {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const canvasContainerRef = useRef<HTMLDivElement>(null);\n  const [scrollProgress, setScrollProgress] = useState(0);\n  \n  useEffect(() => {\n    if (containerRef.current && canvasContainerRef.current) {\n      const sections = containerRef.current.querySelectorAll(\".story-section\");\n      \n      // Animate each section text\n      sections.forEach((section, index) => {\n        gsap.fromTo(\n          section,\n          { opacity: 0, y: 100 },\n          {\n            opacity: 1,\n            y: 0,\n            duration: 1,\n            ease: \"power3.out\",\n            scrollTrigger: {\n              trigger: section,\n              start: \"top center+=100\",\n              end: \"bottom center-=100\",\n              toggleActions: \"play none none reverse\",\n            },\n          }\n        );\n      });\n      \n      // Pin the canvas and track scroll progress\n      ScrollTrigger.create({\n        trigger: containerRef.current,\n        start: \"top top\",\n        end: \"bottom bottom\",\n        pin: canvasContainerRef.current,\n        pinSpacing: false,\n        onUpdate: (self) => {\n          setScrollProgress(self.progress);\n        },\n      });\n    }\n    \n    return () => {\n      ScrollTrigger.getAll().forEach((trigger) => trigger.kill());\n    };\n  }, []);\n  \n  return (\n    <section id=\"story\" ref={containerRef} className=\"relative bg-luxsole-neutral\">\n      {/* Fixed Canvas */}\n      <div\n        ref={canvasContainerRef}\n        className=\"sticky top-0 w-full h-screen z-10\"\n      >\n        <Canvas shadows dpr={[1, 2]}>\n          <StoryScene scrollProgress={scrollProgress} />\n        </Canvas>\n      </div>\n      \n      {/* Scrollable Content */}\n      <div className=\"relative z-20 pointer-events-none\">\n        {STORY_SECTIONS.map((story, index) => (\n          <div\n            key={index}\n            className=\"story-section h-screen flex items-center justify-end px-4 sm:px-6 lg:px-8\"\n          >\n            <div className=\"max-w-xl w-full pointer-events-auto\">\n              <div className=\"glass-effect p-8 rounded-2xl\">\n                <div className=\"text-sm text-luxsole-emerald font-medium mb-2 uppercase tracking-wider\">\n                  {story.subtitle}\n                </div>\n                <h3 className=\"text-4xl md:text-5xl font-bold text-white mb-4\">\n                  {story.title}\n                </h3>\n                <p className=\"text-gray-300 text-lg leading-relaxed\">\n                  {story.description}\n                </p>\n                \n                {/* Progress indicator */}\n                <div className=\"mt-6 flex items-center gap-2\">\n                  {STORY_SECTIONS.map((_, i) => (\n                    <div\n                      key={i}\n                      className={`h-1 rounded-full transition-all duration-500 ${\n                        i === index ? \"w-12 bg-luxsole-gold\" : \"w-6 bg-luxsole-forest\"\n                      }`}\n                    />\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n}\n","size_bytes":6329},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/luxsole/Cart.tsx":{"content":"/**\n * Shopping Cart Component\n * \n * Sliding cart panel with polished animations\n */\n\nimport { useEffect, useRef } from \"react\";\nimport { useLuxSole } from \"@/lib/stores/useLuxSole\";\nimport { X, Plus, Minus, Trash2, ShoppingBag } from \"lucide-react\";\nimport gsap from \"gsap\";\n\nexport default function Cart() {\n  const { cart, isCartOpen, setCartOpen, updateQuantity, removeFromCart } = useLuxSole();\n  const panelRef = useRef<HTMLDivElement>(null);\n  \n  const total = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);\n  \n  useEffect(() => {\n    if (panelRef.current) {\n      if (isCartOpen) {\n        gsap.to(panelRef.current, {\n          x: 0,\n          duration: 0.4,\n          ease: \"power3.out\",\n        });\n      } else {\n        gsap.to(panelRef.current, {\n          x: \"100%\",\n          duration: 0.3,\n          ease: \"power2.in\",\n        });\n      }\n    }\n  }, [isCartOpen]);\n  \n  const handleQuantityChange = (id: string, delta: number) => {\n    const item = cart.find((i) => i.id === id);\n    if (item) {\n      updateQuantity(id, item.quantity + delta);\n    }\n  };\n  \n  if (!isCartOpen) return null;\n  \n  return (\n    <>\n      {/* Backdrop */}\n      <div\n        className=\"fixed inset-0 bg-black/60 backdrop-blur-sm z-40 animate-fade-in\"\n        onClick={() => setCartOpen(false)}\n        aria-hidden=\"true\"\n      />\n      \n      {/* Cart Panel */}\n      <div\n        ref={panelRef}\n        className=\"fixed right-0 top-0 bottom-0 w-full max-w-md bg-luxsole-forest shadow-2xl z-50 flex flex-col border-l border-luxsole-emerald/30\"\n        style={{ transform: \"translateX(100%)\" }}\n        role=\"dialog\"\n        aria-modal=\"true\"\n        aria-labelledby=\"cart-title\"\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-luxsole-emerald/20\">\n          <div className=\"flex items-center gap-3\">\n            <ShoppingBag className=\"w-6 h-6 text-luxsole-emerald\" />\n            <h2 id=\"cart-title\" className=\"text-2xl font-bold text-luxsole-gradient\">\n              Your Collection\n            </h2>\n          </div>\n          <button\n            onClick={() => setCartOpen(false)}\n            className=\"p-2 hover:bg-luxsole-emerald/20 rounded-lg transition-colors\"\n            aria-label=\"Close cart\"\n          >\n            <X className=\"w-6 h-6 text-gray-400\" />\n          </button>\n        </div>\n        \n        {/* Cart Items */}\n        <div className=\"flex-1 overflow-y-auto p-6 space-y-4\">\n          {cart.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <ShoppingBag className=\"w-16 h-16 text-gray-600 mx-auto mb-4\" />\n              <p className=\"text-gray-400\">Your collection is empty</p>\n              <button\n                onClick={() => setCartOpen(false)}\n                className=\"mt-4 px-6 py-2 bg-luxsole-emerald hover:bg-luxsole-gold text-luxsole-forest font-medium rounded-lg transition-colors\"\n              >\n                Explore Collection\n              </button>\n            </div>\n          ) : (\n            cart.map((item, index) => (\n              <div\n                key={item.id}\n                className=\"glass-effect rounded-xl p-4 space-y-3 animate-slide-in-left\"\n                style={{ animationDelay: `${index * 0.1}s` }}\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-white\">{item.name}</h3>\n                    <p className=\"text-sm text-gray-400 capitalize mt-1\">\n                      {item.material} • \n                      <span\n                        className=\"inline-block w-4 h-4 rounded-full ml-2 mr-1 align-middle border border-white/20\"\n                        style={{ backgroundColor: item.baseColor }}\n                      />\n                      <span\n                        className=\"inline-block w-4 h-4 rounded-full mr-2 align-middle border border-white/20\"\n                        style={{ backgroundColor: item.accentColor }}\n                      />\n                    </p>\n                  </div>\n                  <button\n                    onClick={() => removeFromCart(item.id)}\n                    className=\"p-2 hover:bg-red-500/20 rounded-lg transition-colors group\"\n                    aria-label={`Remove ${item.name} from cart`}\n                  >\n                    <Trash2 className=\"w-4 h-4 text-gray-400 group-hover:text-red-400\" />\n                  </button>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <button\n                      onClick={() => handleQuantityChange(item.id, -1)}\n                      className=\"p-1.5 bg-luxsole-neutral hover:bg-luxsole-emerald/20 rounded-lg transition-colors\"\n                      aria-label=\"Decrease quantity\"\n                    >\n                      <Minus className=\"w-4 h-4 text-luxsole-emerald\" />\n                    </button>\n                    <span className=\"w-8 text-center font-medium text-white\">\n                      {item.quantity}\n                    </span>\n                    <button\n                      onClick={() => handleQuantityChange(item.id, 1)}\n                      className=\"p-1.5 bg-luxsole-neutral hover:bg-luxsole-emerald/20 rounded-lg transition-colors\"\n                      aria-label=\"Increase quantity\"\n                    >\n                      <Plus className=\"w-4 h-4 text-luxsole-emerald\" />\n                    </button>\n                  </div>\n                  <span className=\"font-bold text-luxsole-gold text-lg\">\n                    ${item.price * item.quantity}\n                  </span>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n        \n        {/* Footer */}\n        {cart.length > 0 && (\n          <div className=\"p-6 border-t border-luxsole-emerald/20 space-y-4\">\n            <div className=\"flex items-center justify-between text-lg\">\n              <span className=\"text-gray-300\">Total</span>\n              <span className=\"font-bold text-2xl text-luxsole-gold\">${total}</span>\n            </div>\n            <button className=\"w-full py-4 bg-luxsole-gold hover:bg-luxsole-emerald text-luxsole-forest font-bold rounded-lg transition-all duration-300 hover:scale-[1.02] active:scale-[0.98] animate-gold-pulse\">\n              Complete Order\n            </button>\n            <p className=\"text-xs text-center text-gray-500\">\n              Free shipping on all orders\n            </p>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n","size_bytes":6670},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2751},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/luxsole/Loader.tsx":{"content":"/**\n * Cinematic Loader Component\n * \n * Animated loader that morphs from the LuxSole brand mark\n * into a shoe silhouette while displaying loading progress\n */\n\nimport { useEffect, useRef } from \"react\";\nimport { useLuxSole } from \"@/lib/stores/useLuxSole\";\nimport gsap from \"gsap\";\n\nexport default function Loader() {\n  const { loadProgress, isLoading } = useLuxSole();\n  const loaderRef = useRef<HTMLDivElement>(null);\n  const shoePathRef = useRef<SVGPathElement>(null);\n  const progressRef = useRef<HTMLDivElement>(null);\n  \n  useEffect(() => {\n    if (!isLoading && loaderRef.current) {\n      // Fade out animation when loading complete\n      gsap.to(loaderRef.current, {\n        opacity: 0,\n        duration: 0.8,\n        ease: \"power2.inOut\",\n        onComplete: () => {\n          if (loaderRef.current) {\n            loaderRef.current.style.display = \"none\";\n          }\n        },\n      });\n    }\n  }, [isLoading]);\n  \n  useEffect(() => {\n    // Animate the shoe silhouette morphing\n    if (shoePathRef.current) {\n      gsap.to(shoePathRef.current, {\n        strokeDashoffset: 1000 - (loadProgress * 10),\n        duration: 0.3,\n        ease: \"power1.out\",\n      });\n    }\n    \n    // Animate progress text\n    if (progressRef.current) {\n      gsap.to(progressRef.current, {\n        innerText: Math.floor(loadProgress),\n        duration: 0.3,\n        snap: { innerText: 1 },\n      });\n    }\n  }, [loadProgress]);\n  \n  if (!isLoading && loadProgress >= 100) {\n    return null;\n  }\n  \n  return (\n    <div\n      ref={loaderRef}\n      className=\"fixed inset-0 z-50 flex items-center justify-center bg-luxsole-neutral\"\n      style={{ opacity: 1 }}\n    >\n      <div className=\"relative flex flex-col items-center gap-8\">\n        {/* Brand Mark / Shoe Silhouette */}\n        <svg\n          width=\"300\"\n          height=\"200\"\n          viewBox=\"0 0 300 200\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className=\"animate-fade-in\"\n        >\n          {/* Stylized shoe silhouette path */}\n          <path\n            ref={shoePathRef}\n            d=\"M50 100 Q80 80, 120 85 T200 95 Q240 100, 260 110 L255 130 Q240 135, 200 133 T120 125 Q80 120, 60 125 L50 100 Z\"\n            stroke=\"#1FA07A\"\n            strokeWidth=\"3\"\n            fill=\"none\"\n            strokeDasharray=\"1000\"\n            strokeDashoffset=\"1000\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          />\n          \n          {/* Accent details */}\n          <path\n            d=\"M120 85 L125 105\"\n            stroke=\"#E1B75A\"\n            strokeWidth=\"2\"\n            opacity={loadProgress / 100}\n          />\n          <path\n            d=\"M150 90 L155 110\"\n            stroke=\"#E1B75A\"\n            strokeWidth=\"2\"\n            opacity={loadProgress / 100}\n          />\n          <path\n            d=\"M180 92 L185 112\"\n            stroke=\"#E1B75A\"\n            strokeWidth=\"2\"\n            opacity={loadProgress / 100}\n          />\n          \n          {/* Brand circle */}\n          <circle\n            cx=\"200\"\n            cy=\"95\"\n            r=\"8\"\n            fill=\"#E1B75A\"\n            opacity={Math.min(1, loadProgress / 50)}\n          />\n        </svg>\n        \n        {/* Loading Text */}\n        <div className=\"flex flex-col items-center gap-2\">\n          <div className=\"text-luxsole-gradient text-4xl font-bold tracking-wider\">\n            LUXSOLE\n          </div>\n          \n          {/* Progress Bar */}\n          <div className=\"w-64 h-1 bg-luxsole-forest rounded-full overflow-hidden\">\n            <div\n              className=\"h-full bg-gradient-to-r from-luxsole-emerald to-luxsole-gold transition-all duration-300 ease-out\"\n              style={{ width: `${loadProgress}%` }}\n            />\n          </div>\n          \n          {/* Progress Percentage */}\n          <div className=\"text-luxsole-emerald text-sm font-mono\">\n            <span ref={progressRef}>0</span>%\n          </div>\n        </div>\n        \n        {/* Loading tip */}\n        <div className=\"absolute bottom-[-80px] text-gray-500 text-sm text-center max-w-md animate-fade-in\">\n          <p className=\"opacity-60\">Crafting the Perfect Experience</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4206},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4873},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger, type ServerOptions } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions: ServerOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2409},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4132},"client/src/lib/stores/useGame.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\n\nexport type GamePhase = \"ready\" | \"playing\" | \"ended\";\n\ninterface GameState {\n  phase: GamePhase;\n  \n  // Actions\n  start: () => void;\n  restart: () => void;\n  end: () => void;\n}\n\nexport const useGame = create<GameState>()(\n  subscribeWithSelector((set) => ({\n    phase: \"ready\",\n    \n    start: () => {\n      set((state) => {\n        // Only transition from ready to playing\n        if (state.phase === \"ready\") {\n          return { phase: \"playing\" };\n        }\n        return {};\n      });\n    },\n    \n    restart: () => {\n      set(() => ({ phase: \"ready\" }));\n    },\n    \n    end: () => {\n      set((state) => {\n        // Only transition from playing to ended\n        if (state.phase === \"playing\") {\n          return { phase: \"ended\" };\n        }\n        return {};\n      });\n    }\n  }))\n);\n","size_bytes":893},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3849},"client/src/App.tsx":{"content":"/**\n * LuxSole — Interactive 3D Shoes Studio\n * Main Application Component\n * \n * A production-ready Three.js website for showcasing luxury footwear\n * with cinematic animations, material customization, and immersive 3D experiences.\n */\n\nimport { useEffect, Suspense } from \"react\";\nimport { KeyboardControls } from \"@react-three/drei\";\nimport { useLuxSole } from \"@/lib/stores/useLuxSole\";\nimport \"@fontsource/inter\";\n\n// Components\nimport Loader from \"@/components/luxsole/Loader\";\nimport Navigation from \"@/components/luxsole/Navigation\";\nimport Hero from \"@/components/luxsole/Hero\";\nimport Gallery from \"@/components/luxsole/Gallery\";\nimport Story from \"@/components/luxsole/Story\";\nimport Customizer from \"@/components/luxsole/Customizer\";\nimport Cart from \"@/components/luxsole/Cart\";\n\n// Keyboard control mapping for 3D navigation\nenum Controls {\n  rotateLeft = 'rotateLeft',\n  rotateRight = 'rotateRight',\n  rotateUp = 'rotateUp',\n  rotateDown = 'rotateDown',\n  zoomIn = 'zoomIn',\n  zoomOut = 'zoomOut',\n}\n\nconst keyMap = [\n  { name: Controls.rotateLeft, keys: ['ArrowLeft', 'KeyA'] },\n  { name: Controls.rotateRight, keys: ['ArrowRight', 'KeyD'] },\n  { name: Controls.rotateUp, keys: ['ArrowUp', 'KeyW'] },\n  { name: Controls.rotateDown, keys: ['ArrowDown', 'KeyS'] },\n  { name: Controls.zoomIn, keys: ['Equal', 'Plus'] },\n  { name: Controls.zoomOut, keys: ['Minus'] },\n];\n\n// WebGL fallback check\nfunction WebGLFallback() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-luxsole-neutral px-4\">\n      <div className=\"max-w-md text-center\">\n        <h1 className=\"text-3xl font-bold text-luxsole-gradient mb-4\">\n          WebGL Required\n        </h1>\n        <p className=\"text-gray-300 mb-6\">\n          Your browser doesn't support WebGL, which is required for the 3D experience.\n          Please try using a modern browser like Chrome, Firefox, or Safari.\n        </p>\n        <img\n          src=\"/static-hero.jpg\"\n          alt=\"LuxSole Shoes\"\n          className=\"w-full rounded-lg\"\n          onError={(e) => {\n            e.currentTarget.style.display = 'none';\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  const { setLoading, setLoadProgress, isDemoMode, setDemoMode } = useLuxSole();\n  \n  // Check WebGL support\n  useEffect(() => {\n    const canvas = document.createElement('canvas');\n    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n    \n    if (!gl) {\n      console.warn('WebGL not supported');\n      return;\n    }\n  }, []);\n  \n  // Simulated loading progress\n  useEffect(() => {\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += Math.random() * 15;\n      if (progress >= 100) {\n        progress = 100;\n        setLoadProgress(100);\n        setTimeout(() => setLoading(false), 500);\n        clearInterval(interval);\n      } else {\n        setLoadProgress(progress);\n      }\n    }, 200);\n    \n    return () => clearInterval(interval);\n  }, [setLoading, setLoadProgress]);\n  \n  // Demo mode auto-enable after 30 seconds of inactivity\n  useEffect(() => {\n    let timeout: NodeJS.Timeout;\n    \n    const resetTimeout = () => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        if (!isDemoMode) {\n          setDemoMode(true);\n          console.log('Demo mode auto-enabled after inactivity');\n        }\n      }, 30000); // 30 seconds\n    };\n    \n    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'];\n    events.forEach(event => {\n      document.addEventListener(event, resetTimeout);\n    });\n    \n    resetTimeout();\n    \n    return () => {\n      clearTimeout(timeout);\n      events.forEach(event => {\n        document.removeEventListener(event, resetTimeout);\n      });\n    };\n  }, [isDemoMode, setDemoMode]);\n  \n  // Performance monitoring (development only)\n  useEffect(() => {\n    if (import.meta.env.DEV) {\n      console.log('LuxSole Interactive 3D Shoes Studio');\n      console.log('Performance mode: Optimized with LOD system');\n      console.log('Pixel ratio capped at 2 for performance');\n      console.log('Keyboard controls: Arrow keys or WASD to rotate, +/- to zoom');\n    }\n  }, []);\n  \n  return (\n    <KeyboardControls map={keyMap}>\n      {/* Loading Screen */}\n      <Loader />\n      \n      {/* Main Application */}\n      <div className=\"relative min-h-screen bg-luxsole-neutral\">\n        {/* Navigation */}\n        <Navigation />\n        \n        {/* Main Content */}\n        <main>\n          <Suspense fallback={<WebGLFallback />}>\n            {/* Hero Section */}\n            <Hero />\n            \n            {/* Gallery Section */}\n            <Gallery />\n            \n            {/* Story Section */}\n            <Story />\n          </Suspense>\n          \n          {/* Footer */}\n          <footer className=\"bg-luxsole-forest border-t border-luxsole-emerald/20 py-12 px-4 sm:px-6 lg:px-8\">\n            <div className=\"max-w-7xl mx-auto\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-8\">\n                <div>\n                  <h3 className=\"text-luxsole-gradient text-2xl font-bold mb-4\">LUXSOLE</h3>\n                  <p className=\"text-gray-400 text-sm\">\n                    Elevating footwear through precision craftsmanship and innovative design.\n                  </p>\n                </div>\n                \n                <div>\n                  <h4 className=\"text-luxsole-emerald font-medium mb-4\">Quick Links</h4>\n                  <ul className=\"space-y-2 text-sm text-gray-400\">\n                    <li><a href=\"#hero\" className=\"hover:text-luxsole-gold transition-colors\">Home</a></li>\n                    <li><a href=\"#gallery\" className=\"hover:text-luxsole-gold transition-colors\">Collection</a></li>\n                    <li><a href=\"#story\" className=\"hover:text-luxsole-gold transition-colors\">Story</a></li>\n                  </ul>\n                </div>\n                \n                <div>\n                  <h4 className=\"text-luxsole-emerald font-medium mb-4\">Contact</h4>\n                  <p className=\"text-gray-400 text-sm\">\n                    Crafted with precision and passion.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"border-t border-luxsole-emerald/10 pt-8 text-center text-sm text-gray-500\">\n                <p>&copy; 2025 LuxSole. Interactive 3D Experience powered by Three.js</p>\n                <p className=\"mt-2 text-xs\">\n                  Placeholder models with LOD system • Production GLB files should be added to /client/public/models/\n                </p>\n              </div>\n            </div>\n          </footer>\n        </main>\n        \n        {/* Modal Overlays */}\n        <Customizer />\n        <Cart />\n      </div>\n    </KeyboardControls>\n  );\n}\n\nexport default App;\n","size_bytes":6842},"client/src/hooks/use-is-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1871},"client/src/components/luxsole/Navigation.tsx":{"content":"/**\n * Navigation Component\n * \n * Main navigation bar with animated transitions and micro-interactions\n */\n\nimport { useLuxSole, type AppView } from \"@/lib/stores/useLuxSole\";\nimport { ShoppingCart, Menu, X } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport gsap from \"gsap\";\n\nconst NAV_ITEMS: { view: AppView; label: string }[] = [\n  { view: \"hero\", label: \"Home\" },\n  { view: \"gallery\", label: \"Collection\" },\n  { view: \"story\", label: \"Story\" },\n];\n\nexport default function Navigation() {\n  const { currentView, setCurrentView, cart, setCartOpen, isDemoMode, setDemoMode } = useLuxSole();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [isScrolled, setIsScrolled] = useState(false);\n  \n  const cartItemCount = cart.reduce((sum, item) => sum + item.quantity, 0);\n  \n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 20);\n    };\n    \n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n  \n  const handleNavClick = (view: AppView) => {\n    setCurrentView(view);\n    setIsMobileMenuOpen(false);\n    \n    // Scroll to section\n    const sectionId = view === \"hero\" ? \"top\" : view;\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    } else if (view === \"hero\") {\n      window.scrollTo({ top: 0, behavior: \"smooth\" });\n    }\n  };\n  \n  const handleCartClick = () => {\n    setCartOpen(true);\n  };\n  \n  return (\n    <>\n      <nav\n        className={`fixed top-0 left-0 right-0 z-40 transition-all duration-300 ${\n          isScrolled ? \"glass-effect shadow-lg\" : \"bg-transparent\"\n        }`}\n      >\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16 md:h-20\">\n            {/* Logo */}\n            <button\n              onClick={() => handleNavClick(\"hero\")}\n              className=\"text-luxsole-gradient text-2xl md:text-3xl font-bold tracking-wider hover:scale-105 transition-transform duration-300\"\n              aria-label=\"LuxSole Home\"\n            >\n              LUXSOLE\n            </button>\n            \n            {/* Desktop Navigation */}\n            <div className=\"hidden md:flex items-center gap-8\">\n              {NAV_ITEMS.map((item) => (\n                <button\n                  key={item.view}\n                  onClick={() => handleNavClick(item.view)}\n                  className={`relative text-sm font-medium tracking-wide transition-colors duration-300 hover:text-luxsole-emerald group ${\n                    currentView === item.view\n                      ? \"text-luxsole-emerald\"\n                      : \"text-gray-300\"\n                  }`}\n                  aria-label={item.label}\n                  aria-current={currentView === item.view ? \"page\" : undefined}\n                >\n                  {item.label}\n                  <span\n                    className={`absolute bottom-[-4px] left-0 h-0.5 bg-luxsole-gold transition-all duration-300 ${\n                      currentView === item.view ? \"w-full\" : \"w-0 group-hover:w-full\"\n                    }`}\n                  />\n                </button>\n              ))}\n              \n              {/* Demo Mode Toggle */}\n              <button\n                onClick={() => setDemoMode(!isDemoMode)}\n                className={`px-3 py-1.5 text-xs font-medium rounded-full border transition-all duration-300 ${\n                  isDemoMode\n                    ? \"bg-luxsole-gold text-luxsole-forest border-luxsole-gold animate-gold-pulse\"\n                    : \"bg-transparent text-gray-400 border-gray-600 hover:border-luxsole-gold hover:text-luxsole-gold\"\n                }`}\n                aria-label=\"Toggle Demo Mode\"\n                aria-pressed={isDemoMode}\n              >\n                {isDemoMode ? \"Demo Active\" : \"Demo Mode\"}\n              </button>\n            </div>\n            \n            {/* Cart Button */}\n            <button\n              onClick={handleCartClick}\n              className=\"relative p-2 text-gray-300 hover:text-luxsole-emerald transition-colors duration-300 hover:scale-110 transform\"\n              aria-label={`Shopping cart with ${cartItemCount} items`}\n            >\n              <ShoppingCart className=\"w-6 h-6\" />\n              {cartItemCount > 0 && (\n                <span className=\"absolute -top-1 -right-1 bg-luxsole-gold text-luxsole-forest text-xs font-bold w-5 h-5 flex items-center justify-center rounded-full animate-scale-in\">\n                  {cartItemCount}\n                </span>\n              )}\n            </button>\n            \n            {/* Mobile Menu Button */}\n            <button\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              className=\"md:hidden p-2 text-gray-300 hover:text-luxsole-emerald transition-colors\"\n              aria-label=\"Toggle mobile menu\"\n              aria-expanded={isMobileMenuOpen}\n            >\n              {isMobileMenuOpen ? (\n                <X className=\"w-6 h-6\" />\n              ) : (\n                <Menu className=\"w-6 h-6\" />\n              )}\n            </button>\n          </div>\n        </div>\n        \n        {/* Mobile Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden glass-effect border-t border-luxsole-emerald/20 animate-slide-in-left\">\n            <div className=\"px-4 py-4 space-y-3\">\n              {NAV_ITEMS.map((item) => (\n                <button\n                  key={item.view}\n                  onClick={() => handleNavClick(item.view)}\n                  className={`block w-full text-left px-4 py-2 rounded-lg transition-colors duration-300 ${\n                    currentView === item.view\n                      ? \"bg-luxsole-emerald/20 text-luxsole-emerald\"\n                      : \"text-gray-300 hover:bg-luxsole-forest/50\"\n                  }`}\n                  aria-current={currentView === item.view ? \"page\" : undefined}\n                >\n                  {item.label}\n                </button>\n              ))}\n              \n              <button\n                onClick={() => {\n                  setDemoMode(!isDemoMode);\n                  setIsMobileMenuOpen(false);\n                }}\n                className={`block w-full text-left px-4 py-2 rounded-lg transition-colors duration-300 ${\n                  isDemoMode\n                    ? \"bg-luxsole-gold/20 text-luxsole-gold\"\n                    : \"text-gray-300 hover:bg-luxsole-forest/50\"\n                }`}\n                aria-pressed={isDemoMode}\n              >\n                {isDemoMode ? \"Demo Active\" : \"Enable Demo Mode\"}\n              </button>\n            </div>\n          </div>\n        )}\n      </nav>\n    </>\n  );\n}\n","size_bytes":6811},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1486},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1037},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":792},"client/src/models/ShoeModel.tsx":{"content":"/**\n * Procedurally Generated Shoe Model with LOD System\n * \n * This component generates a photorealistic placeholder shoe using\n * procedural geometry and PBR materials with Level of Detail (LOD) support.\n * \n * LOD LEVELS:\n * - LOD 0 (High): Full detail for close viewing (< 5 units)\n * - LOD 1 (Medium): Reduced detail for medium distance (5-10 units)\n * - LOD 2 (Low): Simplified geometry for far viewing (> 10 units)\n * \n * TODO: Replace this procedural model with production GLB files\n * Production models should be placed in /client/public/models/\n * and loaded via useGLTF hook from @react-three/drei\n * \n * Example production usage:\n * const { scene } = useGLTF('/models/luxsole-shoe.glb')\n * return <primitive object={scene.clone()} />\n */\n\nimport { useMemo, useRef, forwardRef, useEffect } from \"react\";\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport type { MaterialType } from \"@/lib/stores/useLuxSole\";\nimport { createShoeMaterial } from \"@/utils/three/materials\";\nimport { createAdvancedShoeMaterial } from \"@/utils/three/advancedMaterials\";\n\ninterface ShoeModelProps {\n  baseColor: string;\n  accentColor: string;\n  material: MaterialType;\n  envMap?: THREE.Texture | null;\n  scale?: number;\n  useAdvancedShaders?: boolean;\n}\n\n/**\n * Generate shoe geometry at different LOD levels\n */\nfunction createShoeGeometries(lodLevel: \"high\" | \"medium\" | \"low\") {\n  const detail = lodLevel === \"high\" ? 32 : lodLevel === \"medium\" ? 16 : 8;\n  \n  // Main body (upper part of shoe)\n  const bodyGeometry = new THREE.CapsuleGeometry(0.4, 1.2, detail / 2, detail);\n  bodyGeometry.rotateZ(Math.PI / 2);\n  bodyGeometry.translate(0, 0.3, 0);\n  \n  // Toe cap\n  const toeGeometry = new THREE.SphereGeometry(0.35, detail, detail / 2, 0, Math.PI);\n  toeGeometry.rotateY(Math.PI / 2);\n  toeGeometry.scale(1, 0.8, 1.2);\n  toeGeometry.translate(0.6, 0.2, 0);\n  \n  // Heel counter\n  const heelGeometry = new THREE.SphereGeometry(0.3, detail, detail / 2, Math.PI, Math.PI);\n  heelGeometry.rotateY(-Math.PI / 2);\n  heelGeometry.scale(0.8, 1, 1);\n  heelGeometry.translate(-0.6, 0.25, 0);\n  \n  // Sole (bottom)\n  const soleGeometry = new THREE.BoxGeometry(1.4, 0.15, 0.6, lodLevel === \"high\" ? 4 : 2, 1, lodLevel === \"high\" ? 2 : 1);\n  soleGeometry.translate(0, 0.075, 0);\n  \n  // Midsole accent\n  const midsoleGeometry = new THREE.BoxGeometry(1.3, 0.1, 0.55, lodLevel === \"high\" ? 4 : 2, 1, lodLevel === \"high\" ? 2 : 1);\n  midsoleGeometry.translate(0, 0.2, 0);\n  \n  // Lace area\n  const laceAreaGeometry = new THREE.BoxGeometry(0.8, 0.2, 0.3, lodLevel === \"high\" ? 3 : 1, 1, 1);\n  laceAreaGeometry.translate(0.1, 0.5, 0);\n  \n  // Tongue\n  const tongueGeometry = new THREE.BoxGeometry(0.4, 0.3, 0.1, lodLevel === \"high\" ? 2 : 1, lodLevel === \"high\" ? 2 : 1, 1);\n  tongueGeometry.rotateX(Math.PI / 12);\n  tongueGeometry.translate(0.1, 0.6, 0);\n  \n  // Heel tab\n  const heelTabGeometry = new THREE.BoxGeometry(0.15, 0.4, 0.3, 1, lodLevel === \"high\" ? 2 : 1, 1);\n  heelTabGeometry.translate(-0.7, 0.5, 0);\n  \n  return {\n    body: bodyGeometry,\n    toe: toeGeometry,\n    heel: heelGeometry,\n    sole: soleGeometry,\n    midsole: midsoleGeometry,\n    laceArea: laceAreaGeometry,\n    tongue: tongueGeometry,\n    heelTab: heelTabGeometry,\n  };\n}\n\nconst ShoeModel = forwardRef<THREE.Group, ShoeModelProps>(({\n  baseColor,\n  accentColor,\n  material,\n  envMap = null,\n  scale = 1,\n  useAdvancedShaders = true,\n}, ref) => {\n  const groupRef = useRef<THREE.Group>(null!);\n  const lodRef = useRef<THREE.LOD>(null);\n  \n  // Create materials with optional advanced shaders\n  const baseMaterial = useMemo(\n    () => {\n      if (useAdvancedShaders) {\n        return createAdvancedShoeMaterial(material, baseColor, envMap, true);\n      }\n      return createShoeMaterial(material, baseColor, envMap);\n    },\n    [material, baseColor, envMap, useAdvancedShaders]\n  );\n  \n  const accentMaterial = useMemo(\n    () => {\n      if (useAdvancedShaders) {\n        return createAdvancedShoeMaterial(material, accentColor, envMap, true);\n      }\n      return createShoeMaterial(material, accentColor, envMap);\n    },\n    [material, accentColor, envMap, useAdvancedShaders]\n  );\n  \n  // Sole material (always rubber-like)\n  const soleMaterial = useMemo(\n    () => new THREE.MeshStandardMaterial({\n      color: new THREE.Color(\"#1a1a1a\"),\n      roughness: 0.8,\n      metalness: 0.1,\n    }),\n    []\n  );\n  \n  // Lace material (high detail only)\n  const laceMaterial = useMemo(\n    () => new THREE.MeshStandardMaterial({\n      color: new THREE.Color(\"#e8e8e8\"),\n      roughness: 0.6,\n      metalness: 0.0,\n    }),\n    []\n  );\n  \n  // Logo material\n  const logoMaterial = useMemo(\n    () => new THREE.MeshStandardMaterial({\n      color: \"#E1B75A\",\n      metalness: 0.9,\n      roughness: 0.2,\n      emissive: \"#E1B75A\",\n      emissiveIntensity: 0.2,\n    }),\n    []\n  );\n  \n  // Create LOD levels once\n  const lodGroup = useMemo(() => {\n    const lod = new THREE.LOD();\n    \n    // High detail level (0-5 units)\n    const highDetail = new THREE.Group();\n    const highGeoms = createShoeGeometries(\"high\");\n    \n    highDetail.add(new THREE.Mesh(highGeoms.body, baseMaterial));\n    highDetail.add(new THREE.Mesh(highGeoms.toe, baseMaterial));\n    highDetail.add(new THREE.Mesh(highGeoms.heel, baseMaterial));\n    highDetail.add(new THREE.Mesh(highGeoms.sole, soleMaterial));\n    highDetail.add(new THREE.Mesh(highGeoms.midsole, accentMaterial));\n    highDetail.add(new THREE.Mesh(highGeoms.laceArea, accentMaterial));\n    highDetail.add(new THREE.Mesh(highGeoms.tongue, baseMaterial));\n    highDetail.add(new THREE.Mesh(highGeoms.heelTab, accentMaterial));\n    \n    // Add lace details for high LOD\n    for (let i = 0; i < 5; i++) {\n      const laceGeom = new THREE.CylinderGeometry(0.015, 0.015, 0.25, 8);\n      laceGeom.rotateZ(Math.PI / 2);\n      laceGeom.translate(i * 0.15 - 0.2, 0.45 + i * 0.05, 0);\n      const laceMesh = new THREE.Mesh(laceGeom, laceMaterial);\n      laceMesh.castShadow = true;\n      highDetail.add(laceMesh);\n    }\n    \n    // Add logo\n    const logoMesh1 = new THREE.Mesh(new THREE.BoxGeometry(0.15, 0.08, 0.01), logoMaterial);\n    logoMesh1.position.set(0.5, 0.35, 0.31);\n    logoMesh1.castShadow = true;\n    highDetail.add(logoMesh1);\n    \n    // Enable shadows for all meshes\n    highDetail.traverse((child) => {\n      if (child instanceof THREE.Mesh) {\n        child.castShadow = true;\n        child.receiveShadow = true;\n      }\n    });\n    \n    lod.addLevel(highDetail, 0);\n    \n    // Medium detail level (5-10 units)\n    const mediumDetail = new THREE.Group();\n    const medGeoms = createShoeGeometries(\"medium\");\n    \n    mediumDetail.add(new THREE.Mesh(medGeoms.body, baseMaterial));\n    mediumDetail.add(new THREE.Mesh(medGeoms.toe, baseMaterial));\n    mediumDetail.add(new THREE.Mesh(medGeoms.heel, baseMaterial));\n    mediumDetail.add(new THREE.Mesh(medGeoms.sole, soleMaterial));\n    mediumDetail.add(new THREE.Mesh(medGeoms.midsole, accentMaterial));\n    mediumDetail.add(new THREE.Mesh(medGeoms.laceArea, accentMaterial));\n    mediumDetail.add(new THREE.Mesh(medGeoms.tongue, baseMaterial));\n    mediumDetail.add(new THREE.Mesh(medGeoms.heelTab, accentMaterial));\n    \n    const logoMesh2 = new THREE.Mesh(new THREE.BoxGeometry(0.15, 0.08, 0.01), logoMaterial);\n    logoMesh2.position.set(0.5, 0.35, 0.31);\n    logoMesh2.castShadow = true;\n    mediumDetail.add(logoMesh2);\n    \n    mediumDetail.traverse((child) => {\n      if (child instanceof THREE.Mesh) {\n        child.castShadow = true;\n        child.receiveShadow = true;\n      }\n    });\n    \n    lod.addLevel(mediumDetail, 5);\n    \n    // Low detail level (>10 units)\n    const lowDetail = new THREE.Group();\n    const lowGeoms = createShoeGeometries(\"low\");\n    \n    lowDetail.add(new THREE.Mesh(lowGeoms.body, baseMaterial));\n    lowDetail.add(new THREE.Mesh(lowGeoms.toe, baseMaterial));\n    lowDetail.add(new THREE.Mesh(lowGeoms.heel, baseMaterial));\n    lowDetail.add(new THREE.Mesh(lowGeoms.sole, soleMaterial));\n    lowDetail.add(new THREE.Mesh(lowGeoms.midsole, accentMaterial));\n    lowDetail.add(new THREE.Mesh(lowGeoms.laceArea, accentMaterial));\n    lowDetail.add(new THREE.Mesh(lowGeoms.tongue, baseMaterial));\n    lowDetail.add(new THREE.Mesh(lowGeoms.heelTab, accentMaterial));\n    \n    lowDetail.traverse((child) => {\n      if (child instanceof THREE.Mesh) {\n        child.castShadow = true;\n        child.receiveShadow = true;\n      }\n    });\n    \n    lod.addLevel(lowDetail, 10);\n    \n    return lod;\n  }, [baseMaterial, accentMaterial, soleMaterial, laceMaterial, logoMaterial]);\n  \n  // Update LOD based on camera distance and dynamic lighting\n  const lightPosRef = useRef(new THREE.Vector3(5, 8, 5));\n  const cameraPosRef = useRef(new THREE.Vector3(0, 0, 5));\n  \n  useFrame(({ camera, scene }) => {\n    if (lodRef.current) {\n      lodRef.current.update(camera);\n    }\n    \n    // Update lighting and camera for advanced shaders\n    if (useAdvancedShaders) {\n      // Get camera world position\n      camera.getWorldPosition(cameraPosRef.current);\n      \n      // Find the brightest spot light\n      let brightestLight: (THREE.SpotLight | THREE.DirectionalLight) | null = null;\n      let maxIntensity = 0;\n      \n      scene.traverse((obj) => {\n        if (obj instanceof THREE.SpotLight || obj instanceof THREE.DirectionalLight) {\n          if (obj.intensity > maxIntensity) {\n            maxIntensity = obj.intensity;\n            brightestLight = obj as (THREE.SpotLight | THREE.DirectionalLight);\n          }\n        }\n      });\n      \n      if (brightestLight) {\n        (brightestLight as THREE.Object3D).getWorldPosition(lightPosRef.current);\n      }\n      \n      // Update shader uniforms\n      [baseMaterial, accentMaterial].forEach((mat) => {\n        if (mat instanceof THREE.ShaderMaterial && mat.uniforms) {\n          if (mat.uniforms.lightPosition) {\n            mat.uniforms.lightPosition.value.copy(lightPosRef.current);\n          }\n          if (mat.uniforms.viewPosition) {\n            mat.uniforms.viewPosition.value.copy(cameraPosRef.current);\n          }\n        }\n      });\n    }\n  });\n  \n  // Combine refs\n  const combinedRef = (node: THREE.Group) => {\n    groupRef.current = node;\n    if (typeof ref === 'function') {\n      ref(node);\n    } else if (ref) {\n      ref.current = node;\n    }\n  };\n  \n  return (\n    <group ref={combinedRef} scale={scale}>\n      <primitive ref={lodRef} object={lodGroup} />\n    </group>\n  );\n});\n\nShoeModel.displayName = \"ShoeModel\";\n\nexport default ShoeModel;\n","size_bytes":10523},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8522},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1877},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1292},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4280},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2859},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    /* LuxSole Color Palette */\n    --luxsole-dark-green: #0F3F2B;\n    --luxsole-emerald: #1FA07A;\n    --luxsole-forest: #072A1E;\n    --luxsole-gold: #E1B75A;\n    --luxsole-neutral: #0A0D0B;\n    --luxsole-highlight: rgba(255, 255, 255, 0.03);\n    \n    /* Theme Variables - mapped to LuxSole palette */\n    --background: 0 0% 4%; /* #0A0D0B */\n    --foreground: 0 0% 98%;\n    --card: 155 60% 8%; /* Deep forest tint */\n    --card-foreground: 0 0% 98%;\n    --popover: 155 60% 8%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 155 60% 15%; /* Dark green */\n    --primary-foreground: 0 0% 98%;\n    --secondary: 164 68% 37%; /* Emerald */\n    --secondary-foreground: 0 0% 98%;\n    --muted: 155 40% 12%;\n    --muted-foreground: 0 0% 64%;\n    --accent: 42 64% 62%; /* Gold */\n    --accent-foreground: 155 60% 8%;\n    --destructive: 0 84% 60%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 155 30% 18%;\n    --input: 155 30% 18%;\n    --ring: 164 68% 37%;\n    --radius: 0.5rem;\n    --chart-1: 164 68% 37%;\n    --chart-2: 42 64% 62%;\n    --chart-3: 155 60% 15%;\n    --chart-4: 155 40% 25%;\n    --chart-5: 155 30% 35%;\n  }\n\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-luxsole-neutral text-foreground;\n    margin: 0;\n    padding: 0;\n    overflow-x: hidden;\n    width: 100vw;\n    min-height: 100vh;\n  }\n  \n  /* Smooth scrolling */\n  html {\n    scroll-behavior: smooth;\n  }\n  \n  /* Custom scrollbar */\n  ::-webkit-scrollbar {\n    width: 8px;\n  }\n  \n  ::-webkit-scrollbar-track {\n    background: var(--luxsole-forest);\n  }\n  \n  ::-webkit-scrollbar-thumb {\n    background: var(--luxsole-emerald);\n    border-radius: 4px;\n  }\n  \n  ::-webkit-scrollbar-thumb:hover {\n    background: var(--luxsole-gold);\n  }\n}\n\n#root {\n  width: 100%;\n  min-height: 100vh;\n  position: relative;\n}\n\n/* Canvas styling */\ncanvas {\n  display: block;\n  touch-action: none;\n  outline: none;\n}\n\n/* Utility classes for LuxSole */\n@layer utilities {\n  .text-luxsole-gradient {\n    background: linear-gradient(135deg, var(--luxsole-emerald) 0%, var(--luxsole-gold) 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n  \n  .bg-luxsole-gradient {\n    background: linear-gradient(135deg, var(--luxsole-forest) 0%, var(--luxsole-dark-green) 100%);\n  }\n  \n  .surface-highlight {\n    background: var(--luxsole-highlight);\n  }\n  \n  .glass-effect {\n    background: rgba(15, 63, 43, 0.1);\n    backdrop-filter: blur(10px);\n    -webkit-backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.05);\n  }\n}\n\n/* Loading animation */\n@keyframes shimmer {\n  0% {\n    background-position: -1000px 0;\n  }\n  100% {\n    background-position: 1000px 0;\n  }\n}\n\n.skeleton {\n  background: linear-gradient(\n    90deg,\n    var(--luxsole-forest) 0%,\n    var(--luxsole-dark-green) 50%,\n    var(--luxsole-forest) 100%\n  );\n  background-size: 1000px 100%;\n  animation: shimmer 2s infinite;\n}\n","size_bytes":3026},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4419},"client/src/utils/three/useDynamicLighting.ts":{"content":"/**\n * Dynamic Lighting Hook\n * \n * Updates shader uniforms with current scene lighting information\n */\n\nimport { useFrame } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport { useRef } from \"react\";\n\ninterface LightingUniforms {\n  lightPosition: { value: THREE.Vector3 };\n}\n\n/**\n * Hook to update shader materials with dynamic lighting\n * Tracks the main directional/spot light position\n */\nexport function useDynamicLighting(material: THREE.Material | null) {\n  const lightPosRef = useRef(new THREE.Vector3(5, 8, 5));\n  \n  useFrame(({ scene }) => {\n    if (!material || !(material instanceof THREE.ShaderMaterial)) {\n      return;\n    }\n    \n    // Find the brightest spot/directional light in the scene\n    let brightestLight: (THREE.SpotLight | THREE.DirectionalLight) | null = null;\n    let maxIntensity = 0;\n    \n    scene.traverse((obj) => {\n      if (obj instanceof THREE.SpotLight || obj instanceof THREE.DirectionalLight) {\n        if (obj.intensity > maxIntensity) {\n          maxIntensity = obj.intensity;\n          brightestLight = obj as (THREE.SpotLight | THREE.DirectionalLight);\n        }\n      }\n    });\n    \n    if (brightestLight) {\n      (brightestLight as THREE.Object3D).getWorldPosition(lightPosRef.current);\n    }\n    \n    // Update shader uniform if it exists\n    if (material.uniforms && material.uniforms.lightPosition) {\n      material.uniforms.lightPosition.value.copy(lightPosRef.current);\n    }\n  });\n  \n  return lightPosRef.current;\n}\n\n/**\n * Update light position for a group of materials\n */\nexport function updateMaterialsLighting(\n  materials: THREE.Material[],\n  lightPosition: THREE.Vector3\n): void {\n  materials.forEach((mat) => {\n    if (mat instanceof THREE.ShaderMaterial && mat.uniforms?.lightPosition) {\n      mat.uniforms.lightPosition.value.copy(lightPosition);\n    }\n  });\n}\n","size_bytes":1839},"client/src/utils/three/advancedMaterials.ts":{"content":"/**\n * Advanced Material System with Custom Shaders\n * \n * Provides materials with advanced visual effects:\n * - Iridescent sheen for metallic surfaces\n * - Subsurface scattering for foam and laces\n * - Anisotropic specular for brushed finishes\n */\n\nimport * as THREE from \"three\";\nimport type { MaterialType } from \"@/lib/stores/useLuxSole\";\n\n// Import shaders (Vite will handle these with vite-plugin-glsl)\nimport iridescentVertexShader from \"@/shaders/iridescent.vert.glsl?raw\";\nimport iridescentFragmentShader from \"@/shaders/iridescent.frag.glsl?raw\";\nimport subsurfaceVertexShader from \"@/shaders/subsurface.vert.glsl?raw\";\nimport subsurfaceFragmentShader from \"@/shaders/subsurface.frag.glsl?raw\";\nimport anisotropicVertexShader from \"@/shaders/anisotropic.vert.glsl?raw\";\nimport anisotropicFragmentShader from \"@/shaders/anisotropic.frag.glsl?raw\";\n\n/**\n * Create iridescent material with rainbow sheen effect\n */\nexport function createIridescentMaterial(\n  baseColor: string | THREE.Color,\n  options: {\n    intensity?: number;\n    scale?: number;\n    metalness?: number;\n    roughness?: number;\n  } = {}\n): THREE.ShaderMaterial {\n  const color = typeof baseColor === \"string\" ? new THREE.Color(baseColor) : baseColor;\n  \n  return new THREE.ShaderMaterial({\n    uniforms: {\n      baseColor: { value: color },\n      iridescentIntensity: { value: options.intensity ?? 0.5 },\n      iridescentScale: { value: options.scale ?? 2.0 },\n      metalness: { value: options.metalness ?? 0.8 },\n      roughness: { value: options.roughness ?? 0.3 },\n      viewPosition: { value: new THREE.Vector3(0, 0, 5) },\n    },\n    vertexShader: iridescentVertexShader,\n    fragmentShader: iridescentFragmentShader,\n    side: THREE.DoubleSide,\n  });\n}\n\n/**\n * Create subsurface scattering material for translucent surfaces\n */\nexport function createSubsurfaceMaterial(\n  baseColor: string | THREE.Color,\n  options: {\n    subsurfaceColor?: THREE.Color;\n    intensity?: number;\n    thickness?: number;\n    lightPosition?: THREE.Vector3;\n    distortion?: number;\n    power?: number;\n    scale?: number;\n  } = {}\n): THREE.ShaderMaterial {\n  const color = typeof baseColor === \"string\" ? new THREE.Color(baseColor) : baseColor;\n  \n  return new THREE.ShaderMaterial({\n    uniforms: {\n      baseColor: { value: color },\n      subsurfaceColor: { value: options.subsurfaceColor ?? new THREE.Color(\"#ffccaa\") },\n      subsurfaceIntensity: { value: options.intensity ?? 0.7 },\n      thickness: { value: options.thickness ?? 0.5 },\n      lightPosition: { value: options.lightPosition ?? new THREE.Vector3(5, 8, 5) },\n      viewPosition: { value: new THREE.Vector3(0, 0, 5) },\n      distortion: { value: options.distortion ?? 0.3 },\n      power: { value: options.power ?? 2.0 },\n      scale: { value: options.scale ?? 1.0 },\n    },\n    vertexShader: subsurfaceVertexShader,\n    fragmentShader: subsurfaceFragmentShader,\n    side: THREE.DoubleSide,\n  });\n}\n\n/**\n * Create anisotropic specular material for brushed surfaces\n */\nexport function createAnisotropicMaterial(\n  baseColor: string | THREE.Color,\n  options: {\n    specularColor?: THREE.Color;\n    roughnessX?: number;\n    roughnessY?: number;\n    intensity?: number;\n    lightPosition?: THREE.Vector3;\n    rotation?: number;\n  } = {}\n): THREE.ShaderMaterial {\n  const color = typeof baseColor === \"string\" ? new THREE.Color(baseColor) : baseColor;\n  \n  const material = new THREE.ShaderMaterial({\n    uniforms: {\n      baseColor: { value: color },\n      specularColor: { value: options.specularColor ?? new THREE.Color(\"#ffffff\") },\n      roughnessX: { value: options.roughnessX ?? 0.3 },\n      roughnessY: { value: options.roughnessY ?? 0.6 },\n      specularIntensity: { value: options.intensity ?? 1.0 },\n      lightPosition: { value: options.lightPosition ?? new THREE.Vector3(5, 8, 5) },\n      viewPosition: { value: new THREE.Vector3(0, 0, 5) },\n      anisotropicRotation: { value: options.rotation ?? 0.0 },\n    },\n    vertexShader: anisotropicVertexShader,\n    fragmentShader: anisotropicFragmentShader,\n    side: THREE.DoubleSide,\n  });\n  \n  return material;\n}\n\n/**\n * Enhanced material creator with shader effects\n */\nexport function createAdvancedShoeMaterial(\n  materialType: MaterialType,\n  color: string,\n  envMap?: THREE.Texture | null,\n  useAdvancedShaders = true\n): THREE.Material {\n  if (!useAdvancedShaders) {\n    // Fallback to standard materials\n    return createStandardMaterial(materialType, color, envMap);\n  }\n  \n  const baseColor = new THREE.Color(color);\n  \n  switch (materialType) {\n    case \"leather\":\n      // Leather with subtle anisotropic highlights\n      return createAnisotropicMaterial(baseColor, {\n        roughnessX: 0.4,\n        roughnessY: 0.6,\n        intensity: 0.5,\n        rotation: 0.25,\n      });\n      \n    case \"nubuck\":\n      // Nubuck with soft subsurface scattering\n      return createSubsurfaceMaterial(baseColor, {\n        subsurfaceColor: baseColor.clone().multiplyScalar(1.2),\n        intensity: 0.4,\n        thickness: 0.3,\n        power: 1.5,\n      });\n      \n    case \"glint\":\n      // Metallic with iridescent sheen\n      return createIridescentMaterial(baseColor, {\n        intensity: 0.7,\n        scale: 3.0,\n        metalness: 0.9,\n        roughness: 0.2,\n      });\n      \n    case \"knit\":\n      // Technical knit with anisotropic fiber pattern\n      return createAnisotropicMaterial(baseColor, {\n        roughnessX: 0.6,\n        roughnessY: 0.2,\n        intensity: 0.3,\n        rotation: 0.5,\n      });\n      \n    default:\n      return createStandardMaterial(materialType, color, envMap);\n  }\n}\n\n/**\n * Standard material fallback (from original materials.ts)\n */\nfunction createStandardMaterial(\n  materialType: MaterialType,\n  color: string,\n  envMap?: THREE.Texture | null\n): THREE.MeshStandardMaterial {\n  const baseColor = new THREE.Color(color);\n  \n  const materialConfigs: Record<MaterialType, Partial<THREE.MeshStandardMaterialParameters>> = {\n    leather: {\n      color: baseColor,\n      roughness: 0.6,\n      metalness: 0.1,\n      envMapIntensity: 0.4,\n    },\n    nubuck: {\n      color: baseColor,\n      roughness: 0.9,\n      metalness: 0.0,\n      envMapIntensity: 0.2,\n    },\n    glint: {\n      color: baseColor,\n      roughness: 0.2,\n      metalness: 0.9,\n      envMapIntensity: 1.0,\n    },\n    knit: {\n      color: baseColor,\n      roughness: 0.7,\n      metalness: 0.0,\n      envMapIntensity: 0.3,\n    },\n  };\n  \n  const config = materialConfigs[materialType];\n  \n  return new THREE.MeshStandardMaterial({\n    ...config,\n    envMap: envMap ?? null,\n  });\n}\n\n/**\n * Update shader material uniforms (for animation/interaction)\n */\nexport function updateShaderUniforms(\n  material: THREE.ShaderMaterial,\n  updates: Record<string, any>\n): void {\n  Object.keys(updates).forEach((key) => {\n    if (material.uniforms[key]) {\n      material.uniforms[key].value = updates[key];\n    }\n  });\n}\n","size_bytes":6884}},"version":2}